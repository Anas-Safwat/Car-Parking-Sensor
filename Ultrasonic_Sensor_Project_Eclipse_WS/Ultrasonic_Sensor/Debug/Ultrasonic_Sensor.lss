
Ultrasonic_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000344c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  0000344c  000034e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080018c  0080018c  0000360c  2**0
                  ALLOC
  3 .stab         00002ed4  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016ef  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a36c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c8c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d6ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <main>
      8a:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 57       	subi	r30, 0x75	; 117
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Ultrasonic_init>:
 * Description:
 * Initializes the ultrasonic sensor by setting up the ICU driver,
 * configuring the trigger pin as output and echo pin as input.
 */
void Ultrasonic_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Ultrasonic_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
    /* Initialize the ICU driver with the required clock (F_CPU/8) and edge detection (rising) */
    ICU_ConfigType icuConfig = { F_CPU_8, RAISING };
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	8a 83       	std	Y+2, r24	; 0x02
    ICU_init(&icuConfig);
     e40:	ce 01       	movw	r24, r28
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	0e 94 4d 13 	call	0x269a	; 0x269a <ICU_init>

    /* Set ICU callback function to process echo pulse duration */
    ICU_setCallBack(Ultrasonic_edgeProcessing);
     e48:	8c e5       	ldi	r24, 0x5C	; 92
     e4a:	98 e0       	ldi	r25, 0x08	; 8
     e4c:	0e 94 96 13 	call	0x272c	; 0x272c <ICU_setCallBack>

    /* Set the trigger pin direction to output */
    GPIO_setupPinDirection(ULTRASONIC_TRIG_PORT_ID, ULTRASONIC_TRIG_PIN_ID, PIN_OUTPUT);
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	67 e0       	ldi	r22, 0x07	; 7
     e54:	41 e0       	ldi	r20, 0x01	; 1
     e56:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>

    /* Set the echo pin direction to input (automatically set by ICU on PD6) */
    GPIO_setupPinDirection(ULTRASONIC_ECHO_PORT_ID, ULTRASONIC_ECHO_PIN_ID, PIN_INPUT);
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	66 e0       	ldi	r22, 0x06	; 6
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <Ultrasonic_Trigger>:
/*
 * Description:
 * Sends a trigger pulse to the ultrasonic sensor.
 */
void Ultrasonic_Trigger(void)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	68 97       	sbiw	r28, 0x18	; 24
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
    /* Send a 10us high pulse to the trigger pin to start measurement */
    GPIO_writePin(ULTRASONIC_TRIG_PORT_ID, ULTRASONIC_TRIG_PIN_ID, LOGIC_HIGH);
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	67 e0       	ldi	r22, 0x07	; 7
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e2       	ldi	r26, 0x20	; 32
     e92:	b1 e4       	ldi	r27, 0x41	; 65
     e94:	8d 8b       	std	Y+21, r24	; 0x15
     e96:	9e 8b       	std	Y+22, r25	; 0x16
     e98:	af 8b       	std	Y+23, r26	; 0x17
     e9a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e9c:	6d 89       	ldd	r22, Y+21	; 0x15
     e9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ea0:	8f 89       	ldd	r24, Y+23	; 0x17
     ea2:	98 8d       	ldd	r25, Y+24	; 0x18
     ea4:	2b ea       	ldi	r18, 0xAB	; 171
     ea6:	3a ea       	ldi	r19, 0xAA	; 170
     ea8:	4a ea       	ldi	r20, 0xAA	; 170
     eaa:	50 e4       	ldi	r21, 0x40	; 64
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	89 8b       	std	Y+17, r24	; 0x11
     eb6:	9a 8b       	std	Y+18, r25	; 0x12
     eb8:	ab 8b       	std	Y+19, r26	; 0x13
     eba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ebc:	69 89       	ldd	r22, Y+17	; 0x11
     ebe:	7a 89       	ldd	r23, Y+18	; 0x12
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	1c f4       	brge	.+6      	; 0xeda <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	88 8b       	std	Y+16, r24	; 0x10
     ed8:	91 c0       	rjmp	.+290    	; 0xffc <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
     eda:	69 89       	ldd	r22, Y+17	; 0x11
     edc:	7a 89       	ldd	r23, Y+18	; 0x12
     ede:	8b 89       	ldd	r24, Y+19	; 0x13
     ee0:	9c 89       	ldd	r25, Y+20	; 0x14
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	53 e4       	ldi	r21, 0x43	; 67
     eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	0c f0       	brlt	.+2      	; 0xef4 <Ultrasonic_Trigger+0x86>
     ef2:	7b c0       	rjmp	.+246    	; 0xfea <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
     ef4:	6d 89       	ldd	r22, Y+21	; 0x15
     ef6:	7e 89       	ldd	r23, Y+22	; 0x16
     ef8:	8f 89       	ldd	r24, Y+23	; 0x17
     efa:	98 8d       	ldd	r25, Y+24	; 0x18
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a e7       	ldi	r20, 0x7A	; 122
     f02:	54 e4       	ldi	r21, 0x44	; 68
     f04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8c 87       	std	Y+12, r24	; 0x0c
     f0e:	9d 87       	std	Y+13, r25	; 0x0d
     f10:	ae 87       	std	Y+14, r26	; 0x0e
     f12:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	6c 85       	ldd	r22, Y+12	; 0x0c
     f16:	7d 85       	ldd	r23, Y+13	; 0x0d
     f18:	8e 85       	ldd	r24, Y+14	; 0x0e
     f1a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a e7       	ldi	r20, 0x7A	; 122
     f22:	55 e4       	ldi	r21, 0x45	; 69
     f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	88 87       	std	Y+8, r24	; 0x08
     f2e:	99 87       	std	Y+9, r25	; 0x09
     f30:	aa 87       	std	Y+10, r26	; 0x0a
     f32:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f34:	68 85       	ldd	r22, Y+8	; 0x08
     f36:	79 85       	ldd	r23, Y+9	; 0x09
     f38:	8a 85       	ldd	r24, Y+10	; 0x0a
     f3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e8       	ldi	r20, 0x80	; 128
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f48:	88 23       	and	r24, r24
     f4a:	2c f4       	brge	.+10     	; 0xf56 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9f 83       	std	Y+7, r25	; 0x07
     f52:	8e 83       	std	Y+6, r24	; 0x06
     f54:	3f c0       	rjmp	.+126    	; 0xfd4 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
     f56:	68 85       	ldd	r22, Y+8	; 0x08
     f58:	79 85       	ldd	r23, Y+9	; 0x09
     f5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f5c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	4f e7       	ldi	r20, 0x7F	; 127
     f64:	57 e4       	ldi	r21, 0x47	; 71
     f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f6a:	18 16       	cp	r1, r24
     f6c:	4c f5       	brge	.+82     	; 0xfc0 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6e:	6c 85       	ldd	r22, Y+12	; 0x0c
     f70:	7d 85       	ldd	r23, Y+13	; 0x0d
     f72:	8e 85       	ldd	r24, Y+14	; 0x0e
     f74:	9f 85       	ldd	r25, Y+15	; 0x0f
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	51 e4       	ldi	r21, 0x41	; 65
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	9f 83       	std	Y+7, r25	; 0x07
     f94:	8e 83       	std	Y+6, r24	; 0x06
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <Ultrasonic_Trigger+0x148>
     f98:	80 e9       	ldi	r24, 0x90	; 144
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	9d 83       	std	Y+5, r25	; 0x05
     f9e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <Ultrasonic_Trigger+0x136>
     fa8:	9d 83       	std	Y+5, r25	; 0x05
     faa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8e 81       	ldd	r24, Y+6	; 0x06
     fae:	9f 81       	ldd	r25, Y+7	; 0x07
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9f 83       	std	Y+7, r25	; 0x07
     fb4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8e 81       	ldd	r24, Y+6	; 0x06
     fb8:	9f 81       	ldd	r25, Y+7	; 0x07
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	69 f7       	brne	.-38     	; 0xf98 <Ultrasonic_Trigger+0x12a>
     fbe:	24 c0       	rjmp	.+72     	; 0x1008 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	68 85       	ldd	r22, Y+8	; 0x08
     fc2:	79 85       	ldd	r23, Y+9	; 0x09
     fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9f 83       	std	Y+7, r25	; 0x07
     fd2:	8e 83       	std	Y+6, r24	; 0x06
     fd4:	8e 81       	ldd	r24, Y+6	; 0x06
     fd6:	9f 81       	ldd	r25, Y+7	; 0x07
     fd8:	9b 83       	std	Y+3, r25	; 0x03
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <Ultrasonic_Trigger+0x172>
     fe4:	9b 83       	std	Y+3, r25	; 0x03
     fe6:	8a 83       	std	Y+2, r24	; 0x02
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fea:	69 89       	ldd	r22, Y+17	; 0x11
     fec:	7a 89       	ldd	r23, Y+18	; 0x12
     fee:	8b 89       	ldd	r24, Y+19	; 0x13
     ff0:	9c 89       	ldd	r25, Y+20	; 0x14
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	88 8b       	std	Y+16, r24	; 0x10
     ffc:	88 89       	ldd	r24, Y+16	; 0x10
     ffe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	8a 95       	dec	r24
    1004:	f1 f7       	brne	.-4      	; 0x1002 <Ultrasonic_Trigger+0x194>
    1006:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    GPIO_writePin(ULTRASONIC_TRIG_PORT_ID, ULTRASONIC_TRIG_PIN_ID, LOGIC_LOW);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	67 e0       	ldi	r22, 0x07	; 7
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
}
    1012:	68 96       	adiw	r28, 0x18	; 24
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <Ultrasonic_readDistance>:
 * Initiates the measurement process by sending a trigger pulse and reading
 * the distance via the ICU driver.
 * Returns the measured distance in centimeters.
 */
uint16 Ultrasonic_readDistance(void)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <Ultrasonic_readDistance+0x6>
    102a:	00 d0       	rcall	.+0      	; 0x102c <Ultrasonic_readDistance+0x8>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    /* Send trigger pulse to start measurement */
    Ultrasonic_Trigger();
    1030:	0e 94 37 07 	call	0xe6e	; 0xe6e <Ultrasonic_Trigger>

    /* Wait for both edges (rising and falling) to be detected and processed */
    while(g_edgeFlag != 2) {}
    1034:	80 91 90 01 	lds	r24, 0x0190
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	e1 f7       	brne	.-8      	; 0x1034 <Ultrasonic_readDistance+0x10>

    /* Calculate the duration of the high pulse (time it took for the echo to return) */
    uint16 pulseDuration = g_echoEndTime - g_echoStartTime;
    103c:	20 91 8e 01 	lds	r18, 0x018E
    1040:	30 91 8f 01 	lds	r19, 0x018F
    1044:	80 91 8c 01 	lds	r24, 0x018C
    1048:	90 91 8d 01 	lds	r25, 0x018D
    104c:	a9 01       	movw	r20, r18
    104e:	48 1b       	sub	r20, r24
    1050:	59 0b       	sbc	r21, r25
    1052:	ca 01       	movw	r24, r20
    1054:	9c 83       	std	Y+4, r25	; 0x04
    1056:	8b 83       	std	Y+3, r24	; 0x03

    /* Calculate the distance in centimeters (using speed of sound = 0.0343 cm/us) */
    uint16 distance = ceil((pulseDuration / 117.6));
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	cc 01       	movw	r24, r24
    105e:	a0 e0       	ldi	r26, 0x00	; 0
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	23 e3       	ldi	r18, 0x33	; 51
    1074:	33 e3       	ldi	r19, 0x33	; 51
    1076:	4b ee       	ldi	r20, 0xEB	; 235
    1078:	52 e4       	ldi	r21, 0x42	; 66
    107a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 84 19 	call	0x3308	; 0x3308 <ceil>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01

    /* Reset the edgeFlag for the next measurement */
    g_edgeFlag = 0;
    109e:	10 92 90 01 	sts	0x0190, r1

    ICU_clearTimerValue();
    10a2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <ICU_clearTimerValue>

    return distance;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <Ultrasonic_edgeProcessing>:
 * Description:
 * This is the callback function that is called by the ICU driver.
 * It calculates the high time (pulse time) generated by the ultrasonic sensor.
 */
void Ultrasonic_edgeProcessing(void)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    if(g_edgeFlag == 0)
    10c0:	80 91 90 01 	lds	r24, 0x0190
    10c4:	88 23       	and	r24, r24
    10c6:	69 f4       	brne	.+26     	; 0x10e2 <Ultrasonic_edgeProcessing+0x2a>
    {
        /* First edge detected (rising edge), record the start time */
        g_echoStartTime = ICU_getInputCaptureValue();
    10c8:	0e 94 c7 13 	call	0x278e	; 0x278e <ICU_getInputCaptureValue>
    10cc:	90 93 8d 01 	sts	0x018D, r25
    10d0:	80 93 8c 01 	sts	0x018C, r24
        ICU_setEdgeDetectionType(FALLING);  // Switch to falling edge
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 a8 13 	call	0x2750	; 0x2750 <ICU_setEdgeDetectionType>
        g_edgeFlag = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 90 01 	sts	0x0190, r24
    10e0:	10 c0       	rjmp	.+32     	; 0x1102 <Ultrasonic_edgeProcessing+0x4a>
    }
    else if(g_edgeFlag == 1)
    10e2:	80 91 90 01 	lds	r24, 0x0190
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	61 f4       	brne	.+24     	; 0x1102 <Ultrasonic_edgeProcessing+0x4a>
    {
        /* Second edge detected (falling edge), record the end time */
        g_echoEndTime = ICU_getInputCaptureValue();
    10ea:	0e 94 c7 13 	call	0x278e	; 0x278e <ICU_getInputCaptureValue>
    10ee:	90 93 8f 01 	sts	0x018F, r25
    10f2:	80 93 8e 01 	sts	0x018E, r24
        ICU_setEdgeDetectionType(RAISING);  // Switch back to rising edge
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	0e 94 a8 13 	call	0x2750	; 0x2750 <ICU_setEdgeDetectionType>
        g_edgeFlag = 2;  // Measurement complete
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	80 93 90 01 	sts	0x0190, r24
    }
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <LEDS_init>:
/*
 * Description:
 * Initializes the LED pins as output and ensures they are turned off initially.
 */
void LEDS_init(void)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	/* Set LED pins as output */
	GPIO_setupPinDirection(PORTC_ID, RED, PIN_OUTPUT);
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, GREEN, PIN_OUTPUT);
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, BLUE, PIN_OUTPUT);
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	62 e0       	ldi	r22, 0x02	; 2
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>

	/* Turn off all LEDs initially */
	LED_off(RED);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
	LED_off(GREEN);
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
	LED_off(BLUE);
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <LED_on>:
 *
 * Parameters:
 *    - id: The ID of the LED to turn on (RED_LED, GREEN_LED, or BLUE_LED).
 */
void LED_on(LED_ID id)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTC_ID, id, LOGIC_HIGH);
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	69 81       	ldd	r22, Y+1	; 0x01
    1156:	41 e0       	ldi	r20, 0x01	; 1
    1158:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
}
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <LED_off>:
 *
 * Parameters:
 *    - id: The ID of the LED to turn off (RED_LED, GREEN_LED, or BLUE_LED).
 */
void LED_off(LED_ID id)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTC_ID, id, LOGIC_LOW);
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	69 81       	ldd	r22, Y+1	; 0x01
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
}
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	2e 97       	sbiw	r28, 0x0e	; 14
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a0 ea       	ldi	r26, 0xA0	; 160
    11b0:	b1 e4       	ldi	r27, 0x41	; 65
    11b2:	8b 87       	std	Y+11, r24	; 0x0b
    11b4:	9c 87       	std	Y+12, r25	; 0x0c
    11b6:	ad 87       	std	Y+13, r26	; 0x0d
    11b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    11bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11be:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a e7       	ldi	r20, 0x7A	; 122
    11c8:	55 e4       	ldi	r21, 0x45	; 69
    11ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8f 83       	std	Y+7, r24	; 0x07
    11d4:	98 87       	std	Y+8, r25	; 0x08
    11d6:	a9 87       	std	Y+9, r26	; 0x09
    11d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11da:	6f 81       	ldd	r22, Y+7	; 0x07
    11dc:	78 85       	ldd	r23, Y+8	; 0x08
    11de:	89 85       	ldd	r24, Y+9	; 0x09
    11e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	2c f4       	brge	.+10     	; 0x11fc <LCD_init+0x7a>
		__ticks = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	3f c0       	rjmp	.+126    	; 0x127a <LCD_init+0xf8>
	else if (__tmp > 65535)
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	3f ef       	ldi	r19, 0xFF	; 255
    1208:	4f e7       	ldi	r20, 0x7F	; 127
    120a:	57 e4       	ldi	r21, 0x47	; 71
    120c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1210:	18 16       	cp	r1, r24
    1212:	4c f5       	brge	.+82     	; 0x1266 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1214:	6b 85       	ldd	r22, Y+11	; 0x0b
    1216:	7c 85       	ldd	r23, Y+12	; 0x0c
    1218:	8d 85       	ldd	r24, Y+13	; 0x0d
    121a:	9e 85       	ldd	r25, Y+14	; 0x0e
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e2       	ldi	r20, 0x20	; 32
    1222:	51 e4       	ldi	r21, 0x41	; 65
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	0f c0       	rjmp	.+30     	; 0x125c <LCD_init+0xda>
    123e:	80 e9       	ldi	r24, 0x90	; 144
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <LCD_init+0xc8>
    124e:	9c 83       	std	Y+4, r25	; 0x04
    1250:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	9e 83       	std	Y+6, r25	; 0x06
    125a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	69 f7       	brne	.-38     	; 0x123e <LCD_init+0xbc>
    1264:	14 c0       	rjmp	.+40     	; 0x128e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1266:	6f 81       	ldd	r22, Y+7	; 0x07
    1268:	78 85       	ldd	r23, Y+8	; 0x08
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <LCD_init+0x104>
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	63 e0       	ldi	r22, 0x03	; 3
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	64 e0       	ldi	r22, 0x04	; 4
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	65 e0       	ldi	r22, 0x05	; 5
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	66 e0       	ldi	r22, 0x06	; 6
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    12b6:	83 e3       	ldi	r24, 0x33	; 51
    12b8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    12bc:	82 e3       	ldi	r24, 0x32	; 50
    12be:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    12c2:	88 e2       	ldi	r24, 0x28	; 40
    12c4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    12c8:	8c e0       	ldi	r24, 0x0C	; 12
    12ca:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
}
    12d4:	2e 96       	adiw	r28, 0x0e	; 14
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	c3 56       	subi	r28, 0x63	; 99
    12f4:	d0 40       	sbci	r29, 0x00	; 0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	fe 01       	movw	r30, r28
    1302:	ed 59       	subi	r30, 0x9D	; 157
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    1312:	fe 01       	movw	r30, r28
    1314:	e1 5a       	subi	r30, 0xA1	; 161
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 e8       	ldi	r26, 0x80	; 128
    131e:	bf e3       	ldi	r27, 0x3F	; 63
    1320:	80 83       	st	Z, r24
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	a2 83       	std	Z+2, r26	; 0x02
    1326:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	8e 01       	movw	r16, r28
    132a:	05 5a       	subi	r16, 0xA5	; 165
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	fe 01       	movw	r30, r28
    1330:	e1 5a       	subi	r30, 0xA1	; 161
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	4a e7       	ldi	r20, 0x7A	; 122
    1342:	55 e4       	ldi	r21, 0x45	; 69
    1344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	f8 01       	movw	r30, r16
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1356:	fe 01       	movw	r30, r28
    1358:	e5 5a       	subi	r30, 0xA5	; 165
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1370:	88 23       	and	r24, r24
    1372:	44 f4       	brge	.+16     	; 0x1384 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1374:	fe 01       	movw	r30, r28
    1376:	e7 5a       	subi	r30, 0xA7	; 167
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
    1382:	64 c0       	rjmp	.+200    	; 0x144c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1384:	fe 01       	movw	r30, r28
    1386:	e5 5a       	subi	r30, 0xA5	; 165
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	3f ef       	ldi	r19, 0xFF	; 255
    1396:	4f e7       	ldi	r20, 0x7F	; 127
    1398:	57 e4       	ldi	r21, 0x47	; 71
    139a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    139e:	18 16       	cp	r1, r24
    13a0:	0c f0       	brlt	.+2      	; 0x13a4 <LCD_sendCommand+0xbe>
    13a2:	43 c0       	rjmp	.+134    	; 0x142a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a4:	fe 01       	movw	r30, r28
    13a6:	e1 5a       	subi	r30, 0xA1	; 161
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e2       	ldi	r20, 0x20	; 32
    13b8:	51 e4       	ldi	r21, 0x41	; 65
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8e 01       	movw	r16, r28
    13c4:	07 5a       	subi	r16, 0xA7	; 167
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	f8 01       	movw	r30, r16
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    13da:	1f c0       	rjmp	.+62     	; 0x141a <LCD_sendCommand+0x134>
    13dc:	fe 01       	movw	r30, r28
    13de:	e9 5a       	subi	r30, 0xA9	; 169
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 e9       	ldi	r24, 0x90	; 144
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
    13ea:	fe 01       	movw	r30, r28
    13ec:	e9 5a       	subi	r30, 0xA9	; 169
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_sendCommand+0x10e>
    13f8:	fe 01       	movw	r30, r28
    13fa:	e9 5a       	subi	r30, 0xA9	; 169
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1402:	de 01       	movw	r26, r28
    1404:	a7 5a       	subi	r26, 0xA7	; 167
    1406:	bf 4f       	sbci	r27, 0xFF	; 255
    1408:	fe 01       	movw	r30, r28
    140a:	e7 5a       	subi	r30, 0xA7	; 167
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	11 96       	adiw	r26, 0x01	; 1
    1416:	9c 93       	st	X, r25
    1418:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	fe 01       	movw	r30, r28
    141c:	e7 5a       	subi	r30, 0xA7	; 167
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	d1 f6       	brne	.-76     	; 0x13dc <LCD_sendCommand+0xf6>
    1428:	27 c0       	rjmp	.+78     	; 0x1478 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	8e 01       	movw	r16, r28
    142c:	07 5a       	subi	r16, 0xA7	; 167
    142e:	1f 4f       	sbci	r17, 0xFF	; 255
    1430:	fe 01       	movw	r30, r28
    1432:	e5 5a       	subi	r30, 0xA5	; 165
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	60 81       	ld	r22, Z
    1438:	71 81       	ldd	r23, Z+1	; 0x01
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	93 81       	ldd	r25, Z+3	; 0x03
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	f8 01       	movw	r30, r16
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    144c:	de 01       	movw	r26, r28
    144e:	ab 5a       	subi	r26, 0xAB	; 171
    1450:	bf 4f       	sbci	r27, 0xFF	; 255
    1452:	fe 01       	movw	r30, r28
    1454:	e7 5a       	subi	r30, 0xA7	; 167
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	8d 93       	st	X+, r24
    145e:	9c 93       	st	X, r25
    1460:	fe 01       	movw	r30, r28
    1462:	eb 5a       	subi	r30, 0xAB	; 171
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <LCD_sendCommand+0x184>
    146e:	fe 01       	movw	r30, r28
    1470:	eb 5a       	subi	r30, 0xAB	; 171
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	62 e0       	ldi	r22, 0x02	; 2
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    1482:	fe 01       	movw	r30, r28
    1484:	ef 5a       	subi	r30, 0xAF	; 175
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e8       	ldi	r26, 0x80	; 128
    148e:	bf e3       	ldi	r27, 0x3F	; 63
    1490:	80 83       	st	Z, r24
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	a2 83       	std	Z+2, r26	; 0x02
    1496:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	8e 01       	movw	r16, r28
    149a:	03 5b       	subi	r16, 0xB3	; 179
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	fe 01       	movw	r30, r28
    14a0:	ef 5a       	subi	r30, 0xAF	; 175
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a e7       	ldi	r20, 0x7A	; 122
    14b2:	55 e4       	ldi	r21, 0x45	; 69
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	f8 01       	movw	r30, r16
    14be:	80 83       	st	Z, r24
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	a2 83       	std	Z+2, r26	; 0x02
    14c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14c6:	fe 01       	movw	r30, r28
    14c8:	e3 5b       	subi	r30, 0xB3	; 179
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	44 f4       	brge	.+16     	; 0x14f4 <LCD_sendCommand+0x20e>
		__ticks = 1;
    14e4:	fe 01       	movw	r30, r28
    14e6:	e5 5b       	subi	r30, 0xB5	; 181
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	64 c0       	rjmp	.+200    	; 0x15bc <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    14f4:	fe 01       	movw	r30, r28
    14f6:	e3 5b       	subi	r30, 0xB3	; 179
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	0c f0       	brlt	.+2      	; 0x1514 <LCD_sendCommand+0x22e>
    1512:	43 c0       	rjmp	.+134    	; 0x159a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	fe 01       	movw	r30, r28
    1516:	ef 5a       	subi	r30, 0xAF	; 175
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8e 01       	movw	r16, r28
    1534:	05 5b       	subi	r16, 0xB5	; 181
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	f8 01       	movw	r30, r16
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	1f c0       	rjmp	.+62     	; 0x158a <LCD_sendCommand+0x2a4>
    154c:	fe 01       	movw	r30, r28
    154e:	e7 5b       	subi	r30, 0xB7	; 183
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 e9       	ldi	r24, 0x90	; 144
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	80 83       	st	Z, r24
    155a:	fe 01       	movw	r30, r28
    155c:	e7 5b       	subi	r30, 0xB7	; 183
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_sendCommand+0x27e>
    1568:	fe 01       	movw	r30, r28
    156a:	e7 5b       	subi	r30, 0xB7	; 183
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	de 01       	movw	r26, r28
    1574:	a5 5b       	subi	r26, 0xB5	; 181
    1576:	bf 4f       	sbci	r27, 0xFF	; 255
    1578:	fe 01       	movw	r30, r28
    157a:	e5 5b       	subi	r30, 0xB5	; 181
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	9c 93       	st	X, r25
    1588:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158a:	fe 01       	movw	r30, r28
    158c:	e5 5b       	subi	r30, 0xB5	; 181
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	d1 f6       	brne	.-76     	; 0x154c <LCD_sendCommand+0x266>
    1598:	27 c0       	rjmp	.+78     	; 0x15e8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159a:	8e 01       	movw	r16, r28
    159c:	05 5b       	subi	r16, 0xB5	; 181
    159e:	1f 4f       	sbci	r17, 0xFF	; 255
    15a0:	fe 01       	movw	r30, r28
    15a2:	e3 5b       	subi	r30, 0xB3	; 179
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	f8 01       	movw	r30, r16
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	de 01       	movw	r26, r28
    15be:	a9 5b       	subi	r26, 0xB9	; 185
    15c0:	bf 4f       	sbci	r27, 0xFF	; 255
    15c2:	fe 01       	movw	r30, r28
    15c4:	e5 5b       	subi	r30, 0xB5	; 181
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	8d 93       	st	X+, r24
    15ce:	9c 93       	st	X, r25
    15d0:	fe 01       	movw	r30, r28
    15d2:	e9 5b       	subi	r30, 0xB9	; 185
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	80 81       	ld	r24, Z
    15d8:	91 81       	ldd	r25, Z+1	; 0x01
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <LCD_sendCommand+0x2f4>
    15de:	fe 01       	movw	r30, r28
    15e0:	e9 5b       	subi	r30, 0xB9	; 185
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    15e8:	fe 01       	movw	r30, r28
    15ea:	ed 59       	subi	r30, 0x9D	; 157
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	80 81       	ld	r24, Z
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	80 71       	andi	r24, 0x10	; 16
    15f6:	90 70       	andi	r25, 0x00	; 0
    15f8:	95 95       	asr	r25
    15fa:	87 95       	ror	r24
    15fc:	95 95       	asr	r25
    15fe:	87 95       	ror	r24
    1600:	95 95       	asr	r25
    1602:	87 95       	ror	r24
    1604:	95 95       	asr	r25
    1606:	87 95       	ror	r24
    1608:	98 2f       	mov	r25, r24
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	63 e0       	ldi	r22, 0x03	; 3
    160e:	49 2f       	mov	r20, r25
    1610:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1614:	fe 01       	movw	r30, r28
    1616:	ed 59       	subi	r30, 0x9D	; 157
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	80 81       	ld	r24, Z
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	80 72       	andi	r24, 0x20	; 32
    1622:	90 70       	andi	r25, 0x00	; 0
    1624:	95 95       	asr	r25
    1626:	87 95       	ror	r24
    1628:	95 95       	asr	r25
    162a:	87 95       	ror	r24
    162c:	95 95       	asr	r25
    162e:	87 95       	ror	r24
    1630:	95 95       	asr	r25
    1632:	87 95       	ror	r24
    1634:	95 95       	asr	r25
    1636:	87 95       	ror	r24
    1638:	98 2f       	mov	r25, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	64 e0       	ldi	r22, 0x04	; 4
    163e:	49 2f       	mov	r20, r25
    1640:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1644:	fe 01       	movw	r30, r28
    1646:	ed 59       	subi	r30, 0x9D	; 157
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	80 74       	andi	r24, 0x40	; 64
    1652:	90 70       	andi	r25, 0x00	; 0
    1654:	08 2e       	mov	r0, r24
    1656:	89 2f       	mov	r24, r25
    1658:	00 0c       	add	r0, r0
    165a:	88 1f       	adc	r24, r24
    165c:	99 0b       	sbc	r25, r25
    165e:	00 0c       	add	r0, r0
    1660:	88 1f       	adc	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	98 2f       	mov	r25, r24
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	65 e0       	ldi	r22, 0x05	; 5
    166a:	49 2f       	mov	r20, r25
    166c:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1670:	fe 01       	movw	r30, r28
    1672:	ed 59       	subi	r30, 0x9D	; 157
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	98 2f       	mov	r25, r24
    167a:	99 1f       	adc	r25, r25
    167c:	99 27       	eor	r25, r25
    167e:	99 1f       	adc	r25, r25
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	66 e0       	ldi	r22, 0x06	; 6
    1684:	49 2f       	mov	r20, r25
    1686:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    168a:	fe 01       	movw	r30, r28
    168c:	ed 5b       	subi	r30, 0xBD	; 189
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e8       	ldi	r26, 0x80	; 128
    1696:	bf e3       	ldi	r27, 0x3F	; 63
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	8e 01       	movw	r16, r28
    16a2:	01 5c       	subi	r16, 0xC1	; 193
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	ed 5b       	subi	r30, 0xBD	; 189
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a e7       	ldi	r20, 0x7A	; 122
    16ba:	55 e4       	ldi	r21, 0x45	; 69
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ce:	fe 01       	movw	r30, r28
    16d0:	ff 96       	adiw	r30, 0x3f	; 63
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <LCD_sendCommand+0x40e>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9e af       	std	Y+62, r25	; 0x3e
    16f0:	8d af       	std	Y+61, r24	; 0x3d
    16f2:	46 c0       	rjmp	.+140    	; 0x1780 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    16f4:	fe 01       	movw	r30, r28
    16f6:	ff 96       	adiw	r30, 0x3f	; 63
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	4f e7       	ldi	r20, 0x7F	; 127
    1706:	57 e4       	ldi	r21, 0x47	; 71
    1708:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    170c:	18 16       	cp	r1, r24
    170e:	64 f5       	brge	.+88     	; 0x1768 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1710:	fe 01       	movw	r30, r28
    1712:	ed 5b       	subi	r30, 0xBD	; 189
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	60 81       	ld	r22, Z
    1718:	71 81       	ldd	r23, Z+1	; 0x01
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e af       	std	Y+62, r25	; 0x3e
    173c:	8d af       	std	Y+61, r24	; 0x3d
    173e:	0f c0       	rjmp	.+30     	; 0x175e <LCD_sendCommand+0x478>
    1740:	80 e9       	ldi	r24, 0x90	; 144
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	9c af       	std	Y+60, r25	; 0x3c
    1746:	8b af       	std	Y+59, r24	; 0x3b
    1748:	8b ad       	ldd	r24, Y+59	; 0x3b
    174a:	9c ad       	ldd	r25, Y+60	; 0x3c
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_sendCommand+0x466>
    1750:	9c af       	std	Y+60, r25	; 0x3c
    1752:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8d ad       	ldd	r24, Y+61	; 0x3d
    1756:	9e ad       	ldd	r25, Y+62	; 0x3e
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9e af       	std	Y+62, r25	; 0x3e
    175c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1760:	9e ad       	ldd	r25, Y+62	; 0x3e
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <LCD_sendCommand+0x45a>
    1766:	16 c0       	rjmp	.+44     	; 0x1794 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	fe 01       	movw	r30, r28
    176a:	ff 96       	adiw	r30, 0x3f	; 63
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e af       	std	Y+62, r25	; 0x3e
    177e:	8d af       	std	Y+61, r24	; 0x3d
    1780:	8d ad       	ldd	r24, Y+61	; 0x3d
    1782:	9e ad       	ldd	r25, Y+62	; 0x3e
    1784:	9a af       	std	Y+58, r25	; 0x3a
    1786:	89 af       	std	Y+57, r24	; 0x39
    1788:	89 ad       	ldd	r24, Y+57	; 0x39
    178a:	9a ad       	ldd	r25, Y+58	; 0x3a
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_sendCommand+0x4a6>
    1790:	9a af       	std	Y+58, r25	; 0x3a
    1792:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	62 e0       	ldi	r22, 0x02	; 2
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 e8       	ldi	r26, 0x80	; 128
    17a4:	bf e3       	ldi	r27, 0x3F	; 63
    17a6:	8d ab       	std	Y+53, r24	; 0x35
    17a8:	9e ab       	std	Y+54, r25	; 0x36
    17aa:	af ab       	std	Y+55, r26	; 0x37
    17ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ae:	6d a9       	ldd	r22, Y+53	; 0x35
    17b0:	7e a9       	ldd	r23, Y+54	; 0x36
    17b2:	8f a9       	ldd	r24, Y+55	; 0x37
    17b4:	98 ad       	ldd	r25, Y+56	; 0x38
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4a e7       	ldi	r20, 0x7A	; 122
    17bc:	55 e4       	ldi	r21, 0x45	; 69
    17be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	89 ab       	std	Y+49, r24	; 0x31
    17c8:	9a ab       	std	Y+50, r25	; 0x32
    17ca:	ab ab       	std	Y+51, r26	; 0x33
    17cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ce:	69 a9       	ldd	r22, Y+49	; 0x31
    17d0:	7a a9       	ldd	r23, Y+50	; 0x32
    17d2:	8b a9       	ldd	r24, Y+51	; 0x33
    17d4:	9c a9       	ldd	r25, Y+52	; 0x34
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e8       	ldi	r20, 0x80	; 128
    17dc:	5f e3       	ldi	r21, 0x3F	; 63
    17de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17e2:	88 23       	and	r24, r24
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <LCD_sendCommand+0x50a>
		__ticks = 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	98 ab       	std	Y+48, r25	; 0x30
    17ec:	8f a7       	std	Y+47, r24	; 0x2f
    17ee:	3f c0       	rjmp	.+126    	; 0x186e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    17f0:	69 a9       	ldd	r22, Y+49	; 0x31
    17f2:	7a a9       	ldd	r23, Y+50	; 0x32
    17f4:	8b a9       	ldd	r24, Y+51	; 0x33
    17f6:	9c a9       	ldd	r25, Y+52	; 0x34
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	3f ef       	ldi	r19, 0xFF	; 255
    17fc:	4f e7       	ldi	r20, 0x7F	; 127
    17fe:	57 e4       	ldi	r21, 0x47	; 71
    1800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1804:	18 16       	cp	r1, r24
    1806:	4c f5       	brge	.+82     	; 0x185a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1808:	6d a9       	ldd	r22, Y+53	; 0x35
    180a:	7e a9       	ldd	r23, Y+54	; 0x36
    180c:	8f a9       	ldd	r24, Y+55	; 0x37
    180e:	98 ad       	ldd	r25, Y+56	; 0x38
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e2       	ldi	r20, 0x20	; 32
    1816:	51 e4       	ldi	r21, 0x41	; 65
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	bc 01       	movw	r22, r24
    1822:	cd 01       	movw	r24, r26
    1824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	98 ab       	std	Y+48, r25	; 0x30
    182e:	8f a7       	std	Y+47, r24	; 0x2f
    1830:	0f c0       	rjmp	.+30     	; 0x1850 <LCD_sendCommand+0x56a>
    1832:	80 e9       	ldi	r24, 0x90	; 144
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	9e a7       	std	Y+46, r25	; 0x2e
    1838:	8d a7       	std	Y+45, r24	; 0x2d
    183a:	8d a5       	ldd	r24, Y+45	; 0x2d
    183c:	9e a5       	ldd	r25, Y+46	; 0x2e
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_sendCommand+0x558>
    1842:	9e a7       	std	Y+46, r25	; 0x2e
    1844:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1846:	8f a5       	ldd	r24, Y+47	; 0x2f
    1848:	98 a9       	ldd	r25, Y+48	; 0x30
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	98 ab       	std	Y+48, r25	; 0x30
    184e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1850:	8f a5       	ldd	r24, Y+47	; 0x2f
    1852:	98 a9       	ldd	r25, Y+48	; 0x30
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	69 f7       	brne	.-38     	; 0x1832 <LCD_sendCommand+0x54c>
    1858:	14 c0       	rjmp	.+40     	; 0x1882 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185a:	69 a9       	ldd	r22, Y+49	; 0x31
    185c:	7a a9       	ldd	r23, Y+50	; 0x32
    185e:	8b a9       	ldd	r24, Y+51	; 0x33
    1860:	9c a9       	ldd	r25, Y+52	; 0x34
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	98 ab       	std	Y+48, r25	; 0x30
    186c:	8f a7       	std	Y+47, r24	; 0x2f
    186e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1870:	98 a9       	ldd	r25, Y+48	; 0x30
    1872:	9c a7       	std	Y+44, r25	; 0x2c
    1874:	8b a7       	std	Y+43, r24	; 0x2b
    1876:	8b a5       	ldd	r24, Y+43	; 0x2b
    1878:	9c a5       	ldd	r25, Y+44	; 0x2c
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_sendCommand+0x594>
    187e:	9c a7       	std	Y+44, r25	; 0x2c
    1880:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	62 e0       	ldi	r22, 0x02	; 2
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a0 e8       	ldi	r26, 0x80	; 128
    1892:	bf e3       	ldi	r27, 0x3F	; 63
    1894:	8f a3       	std	Y+39, r24	; 0x27
    1896:	98 a7       	std	Y+40, r25	; 0x28
    1898:	a9 a7       	std	Y+41, r26	; 0x29
    189a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189c:	6f a1       	ldd	r22, Y+39	; 0x27
    189e:	78 a5       	ldd	r23, Y+40	; 0x28
    18a0:	89 a5       	ldd	r24, Y+41	; 0x29
    18a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a e7       	ldi	r20, 0x7A	; 122
    18aa:	55 e4       	ldi	r21, 0x45	; 69
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8b a3       	std	Y+35, r24	; 0x23
    18b6:	9c a3       	std	Y+36, r25	; 0x24
    18b8:	ad a3       	std	Y+37, r26	; 0x25
    18ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18bc:	6b a1       	ldd	r22, Y+35	; 0x23
    18be:	7c a1       	ldd	r23, Y+36	; 0x24
    18c0:	8d a1       	ldd	r24, Y+37	; 0x25
    18c2:	9e a1       	ldd	r25, Y+38	; 0x26
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <LCD_sendCommand+0x5f8>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9a a3       	std	Y+34, r25	; 0x22
    18da:	89 a3       	std	Y+33, r24	; 0x21
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    18de:	6b a1       	ldd	r22, Y+35	; 0x23
    18e0:	7c a1       	ldd	r23, Y+36	; 0x24
    18e2:	8d a1       	ldd	r24, Y+37	; 0x25
    18e4:	9e a1       	ldd	r25, Y+38	; 0x26
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	6f a1       	ldd	r22, Y+39	; 0x27
    18f8:	78 a5       	ldd	r23, Y+40	; 0x28
    18fa:	89 a5       	ldd	r24, Y+41	; 0x29
    18fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e2       	ldi	r20, 0x20	; 32
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9a a3       	std	Y+34, r25	; 0x22
    191c:	89 a3       	std	Y+33, r24	; 0x21
    191e:	0f c0       	rjmp	.+30     	; 0x193e <LCD_sendCommand+0x658>
    1920:	80 e9       	ldi	r24, 0x90	; 144
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	98 a3       	std	Y+32, r25	; 0x20
    1926:	8f 8f       	std	Y+31, r24	; 0x1f
    1928:	8f 8d       	ldd	r24, Y+31	; 0x1f
    192a:	98 a1       	ldd	r25, Y+32	; 0x20
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_sendCommand+0x646>
    1930:	98 a3       	std	Y+32, r25	; 0x20
    1932:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	89 a1       	ldd	r24, Y+33	; 0x21
    1936:	9a a1       	ldd	r25, Y+34	; 0x22
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9a a3       	std	Y+34, r25	; 0x22
    193c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	89 a1       	ldd	r24, Y+33	; 0x21
    1940:	9a a1       	ldd	r25, Y+34	; 0x22
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	69 f7       	brne	.-38     	; 0x1920 <LCD_sendCommand+0x63a>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	6b a1       	ldd	r22, Y+35	; 0x23
    194a:	7c a1       	ldd	r23, Y+36	; 0x24
    194c:	8d a1       	ldd	r24, Y+37	; 0x25
    194e:	9e a1       	ldd	r25, Y+38	; 0x26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9a a3       	std	Y+34, r25	; 0x22
    195a:	89 a3       	std	Y+33, r24	; 0x21
    195c:	89 a1       	ldd	r24, Y+33	; 0x21
    195e:	9a a1       	ldd	r25, Y+34	; 0x22
    1960:	9e 8f       	std	Y+30, r25	; 0x1e
    1962:	8d 8f       	std	Y+29, r24	; 0x1d
    1964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1966:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <LCD_sendCommand+0x682>
    196c:	9e 8f       	std	Y+30, r25	; 0x1e
    196e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1970:	fe 01       	movw	r30, r28
    1972:	ed 59       	subi	r30, 0x9D	; 157
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	98 2f       	mov	r25, r24
    197a:	91 70       	andi	r25, 0x01	; 1
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	63 e0       	ldi	r22, 0x03	; 3
    1980:	49 2f       	mov	r20, r25
    1982:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1986:	fe 01       	movw	r30, r28
    1988:	ed 59       	subi	r30, 0x9D	; 157
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 81       	ld	r24, Z
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	82 70       	andi	r24, 0x02	; 2
    1994:	90 70       	andi	r25, 0x00	; 0
    1996:	95 95       	asr	r25
    1998:	87 95       	ror	r24
    199a:	98 2f       	mov	r25, r24
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	64 e0       	ldi	r22, 0x04	; 4
    19a0:	49 2f       	mov	r20, r25
    19a2:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    19a6:	fe 01       	movw	r30, r28
    19a8:	ed 59       	subi	r30, 0x9D	; 157
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	84 70       	andi	r24, 0x04	; 4
    19b4:	90 70       	andi	r25, 0x00	; 0
    19b6:	95 95       	asr	r25
    19b8:	87 95       	ror	r24
    19ba:	95 95       	asr	r25
    19bc:	87 95       	ror	r24
    19be:	98 2f       	mov	r25, r24
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	65 e0       	ldi	r22, 0x05	; 5
    19c4:	49 2f       	mov	r20, r25
    19c6:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    19ca:	fe 01       	movw	r30, r28
    19cc:	ed 59       	subi	r30, 0x9D	; 157
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	88 70       	andi	r24, 0x08	; 8
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	95 95       	asr	r25
    19dc:	87 95       	ror	r24
    19de:	95 95       	asr	r25
    19e0:	87 95       	ror	r24
    19e2:	95 95       	asr	r25
    19e4:	87 95       	ror	r24
    19e6:	98 2f       	mov	r25, r24
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	66 e0       	ldi	r22, 0x06	; 6
    19ec:	49 2f       	mov	r20, r25
    19ee:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a0 e8       	ldi	r26, 0x80	; 128
    19f8:	bf e3       	ldi	r27, 0x3F	; 63
    19fa:	89 8f       	std	Y+25, r24	; 0x19
    19fc:	9a 8f       	std	Y+26, r25	; 0x1a
    19fe:	ab 8f       	std	Y+27, r26	; 0x1b
    1a00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	69 8d       	ldd	r22, Y+25	; 0x19
    1a04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	4a e7       	ldi	r20, 0x7A	; 122
    1a10:	55 e4       	ldi	r21, 0x45	; 69
    1a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	8d 8b       	std	Y+21, r24	; 0x15
    1a1c:	9e 8b       	std	Y+22, r25	; 0x16
    1a1e:	af 8b       	std	Y+23, r26	; 0x17
    1a20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a22:	6d 89       	ldd	r22, Y+21	; 0x15
    1a24:	7e 89       	ldd	r23, Y+22	; 0x16
    1a26:	8f 89       	ldd	r24, Y+23	; 0x17
    1a28:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a36:	88 23       	and	r24, r24
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9c 8b       	std	Y+20, r25	; 0x14
    1a40:	8b 8b       	std	Y+19, r24	; 0x13
    1a42:	3f c0       	rjmp	.+126    	; 0x1ac2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1a44:	6d 89       	ldd	r22, Y+21	; 0x15
    1a46:	7e 89       	ldd	r23, Y+22	; 0x16
    1a48:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	4c f5       	brge	.+82     	; 0x1aae <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9c 8b       	std	Y+20, r25	; 0x14
    1a82:	8b 8b       	std	Y+19, r24	; 0x13
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <LCD_sendCommand+0x7be>
    1a86:	80 e9       	ldi	r24, 0x90	; 144
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	9a 8b       	std	Y+18, r25	; 0x12
    1a8c:	89 8b       	std	Y+17, r24	; 0x11
    1a8e:	89 89       	ldd	r24, Y+17	; 0x11
    1a90:	9a 89       	ldd	r25, Y+18	; 0x12
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_sendCommand+0x7ac>
    1a96:	9a 8b       	std	Y+18, r25	; 0x12
    1a98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9c 8b       	std	Y+20, r25	; 0x14
    1aa2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <LCD_sendCommand+0x7a0>
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
    1ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac6:	98 8b       	std	Y+16, r25	; 0x10
    1ac8:	8f 87       	std	Y+15, r24	; 0x0f
    1aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1acc:	98 89       	ldd	r25, Y+16	; 0x10
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_sendCommand+0x7e8>
    1ad2:	98 8b       	std	Y+16, r25	; 0x10
    1ad4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	62 e0       	ldi	r22, 0x02	; 2
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e8       	ldi	r26, 0x80	; 128
    1ae6:	bf e3       	ldi	r27, 0x3F	; 63
    1ae8:	8b 87       	std	Y+11, r24	; 0x0b
    1aea:	9c 87       	std	Y+12, r25	; 0x0c
    1aec:	ad 87       	std	Y+13, r26	; 0x0d
    1aee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a e7       	ldi	r20, 0x7A	; 122
    1afe:	55 e4       	ldi	r21, 0x45	; 69
    1b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	8f 83       	std	Y+7, r24	; 0x07
    1b0a:	98 87       	std	Y+8, r25	; 0x08
    1b0c:	a9 87       	std	Y+9, r26	; 0x09
    1b0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b10:	6f 81       	ldd	r22, Y+7	; 0x07
    1b12:	78 85       	ldd	r23, Y+8	; 0x08
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	2c f4       	brge	.+10     	; 0x1b32 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	4c f5       	brge	.+82     	; 0x1b9c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <LCD_sendCommand+0x8ac>
    1b74:	80 e9       	ldi	r24, 0x90	; 144
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	9c 83       	std	Y+4, r25	; 0x04
    1b7a:	8b 83       	std	Y+3, r24	; 0x03
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_sendCommand+0x89a>
    1b84:	9c 83       	std	Y+4, r25	; 0x04
    1b86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f7       	brne	.-38     	; 0x1b74 <LCD_sendCommand+0x88e>
    1b9a:	14 c0       	rjmp	.+40     	; 0x1bc4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ba0:	89 85       	ldd	r24, Y+9	; 0x09
    1ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_sendCommand+0x8d6>
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1bc4:	cd 59       	subi	r28, 0x9D	; 157
    1bc6:	df 4f       	sbci	r29, 0xFF	; 255
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	c3 56       	subi	r28, 0x63	; 99
    1bea:	d0 40       	sbci	r29, 0x00	; 0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ed 59       	subi	r30, 0x9D	; 157
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e1 5a       	subi	r30, 0xA1	; 161
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e8       	ldi	r26, 0x80	; 128
    1c14:	bf e3       	ldi	r27, 0x3F	; 63
    1c16:	80 83       	st	Z, r24
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	a2 83       	std	Z+2, r26	; 0x02
    1c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	8e 01       	movw	r16, r28
    1c20:	05 5a       	subi	r16, 0xA5	; 165
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	e1 5a       	subi	r30, 0xA1	; 161
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a e7       	ldi	r20, 0x7A	; 122
    1c38:	55 e4       	ldi	r21, 0x45	; 69
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e5 5a       	subi	r30, 0xA5	; 165
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	44 f4       	brge	.+16     	; 0x1c7a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e7 5a       	subi	r30, 0xA7	; 167
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	64 c0       	rjmp	.+200    	; 0x1d42 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e5 5a       	subi	r30, 0xA5	; 165
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <LCD_displayCharacter+0xbe>
    1c98:	43 c0       	rjmp	.+134    	; 0x1d20 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e1 5a       	subi	r30, 0xA1	; 161
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8e 01       	movw	r16, r28
    1cba:	07 5a       	subi	r16, 0xA7	; 167
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	f8 01       	movw	r30, r16
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
    1cd0:	1f c0       	rjmp	.+62     	; 0x1d10 <LCD_displayCharacter+0x134>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e9 5a       	subi	r30, 0xA9	; 169
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 e9       	ldi	r24, 0x90	; 144
    1cda:	91 e0       	ldi	r25, 0x01	; 1
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e9 5a       	subi	r30, 0xA9	; 169
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_displayCharacter+0x10e>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e9 5a       	subi	r30, 0xA9	; 169
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	de 01       	movw	r26, r28
    1cfa:	a7 5a       	subi	r26, 0xA7	; 167
    1cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e7 5a       	subi	r30, 0xA7	; 167
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	9c 93       	st	X, r25
    1d0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	fe 01       	movw	r30, r28
    1d12:	e7 5a       	subi	r30, 0xA7	; 167
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	d1 f6       	brne	.-76     	; 0x1cd2 <LCD_displayCharacter+0xf6>
    1d1e:	27 c0       	rjmp	.+78     	; 0x1d6e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	8e 01       	movw	r16, r28
    1d22:	07 5a       	subi	r16, 0xA7	; 167
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e5 5a       	subi	r30, 0xA5	; 165
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	de 01       	movw	r26, r28
    1d44:	ab 5a       	subi	r26, 0xAB	; 171
    1d46:	bf 4f       	sbci	r27, 0xFF	; 255
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e7 5a       	subi	r30, 0xA7	; 167
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	8d 93       	st	X+, r24
    1d54:	9c 93       	st	X, r25
    1d56:	fe 01       	movw	r30, r28
    1d58:	eb 5a       	subi	r30, 0xAB	; 171
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_displayCharacter+0x184>
    1d64:	fe 01       	movw	r30, r28
    1d66:	eb 5a       	subi	r30, 0xAB	; 171
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	62 e0       	ldi	r22, 0x02	; 2
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ef 5a       	subi	r30, 0xAF	; 175
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a0 e8       	ldi	r26, 0x80	; 128
    1d84:	bf e3       	ldi	r27, 0x3F	; 63
    1d86:	80 83       	st	Z, r24
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	a2 83       	std	Z+2, r26	; 0x02
    1d8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	8e 01       	movw	r16, r28
    1d90:	03 5b       	subi	r16, 0xB3	; 179
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	ef 5a       	subi	r30, 0xAF	; 175
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a e7       	ldi	r20, 0x7A	; 122
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	f8 01       	movw	r30, r16
    1db4:	80 83       	st	Z, r24
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	a2 83       	std	Z+2, r26	; 0x02
    1dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e3 5b       	subi	r30, 0xB3	; 179
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e8       	ldi	r20, 0x80	; 128
    1dd0:	5f e3       	ldi	r21, 0x3F	; 63
    1dd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd6:	88 23       	and	r24, r24
    1dd8:	44 f4       	brge	.+16     	; 0x1dea <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e5 5b       	subi	r30, 0xB5	; 181
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	64 c0       	rjmp	.+200    	; 0x1eb2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1dea:	fe 01       	movw	r30, r28
    1dec:	e3 5b       	subi	r30, 0xB3	; 179
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	60 81       	ld	r22, Z
    1df2:	71 81       	ldd	r23, Z+1	; 0x01
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	93 81       	ldd	r25, Z+3	; 0x03
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	3f ef       	ldi	r19, 0xFF	; 255
    1dfc:	4f e7       	ldi	r20, 0x7F	; 127
    1dfe:	57 e4       	ldi	r21, 0x47	; 71
    1e00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e04:	18 16       	cp	r1, r24
    1e06:	0c f0       	brlt	.+2      	; 0x1e0a <LCD_displayCharacter+0x22e>
    1e08:	43 c0       	rjmp	.+134    	; 0x1e90 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ef 5a       	subi	r30, 0xAF	; 175
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e2       	ldi	r20, 0x20	; 32
    1e1e:	51 e4       	ldi	r21, 0x41	; 65
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8e 01       	movw	r16, r28
    1e2a:	05 5b       	subi	r16, 0xB5	; 181
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
    1e40:	1f c0       	rjmp	.+62     	; 0x1e80 <LCD_displayCharacter+0x2a4>
    1e42:	fe 01       	movw	r30, r28
    1e44:	e7 5b       	subi	r30, 0xB7	; 183
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 e9       	ldi	r24, 0x90	; 144
    1e4a:	91 e0       	ldi	r25, 0x01	; 1
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
    1e50:	fe 01       	movw	r30, r28
    1e52:	e7 5b       	subi	r30, 0xB7	; 183
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_displayCharacter+0x27e>
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e7 5b       	subi	r30, 0xB7	; 183
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e68:	de 01       	movw	r26, r28
    1e6a:	a5 5b       	subi	r26, 0xB5	; 181
    1e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e5 5b       	subi	r30, 0xB5	; 181
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	11 96       	adiw	r26, 0x01	; 1
    1e7c:	9c 93       	st	X, r25
    1e7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	fe 01       	movw	r30, r28
    1e82:	e5 5b       	subi	r30, 0xB5	; 181
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	d1 f6       	brne	.-76     	; 0x1e42 <LCD_displayCharacter+0x266>
    1e8e:	27 c0       	rjmp	.+78     	; 0x1ede <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e90:	8e 01       	movw	r16, r28
    1e92:	05 5b       	subi	r16, 0xB5	; 181
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	e3 5b       	subi	r30, 0xB3	; 179
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	f8 01       	movw	r30, r16
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
    1eb2:	de 01       	movw	r26, r28
    1eb4:	a9 5b       	subi	r26, 0xB9	; 185
    1eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e5 5b       	subi	r30, 0xB5	; 181
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	8d 93       	st	X+, r24
    1ec4:	9c 93       	st	X, r25
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e9 5b       	subi	r30, 0xB9	; 185
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_displayCharacter+0x2f4>
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e9 5b       	subi	r30, 0xB9	; 185
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ed 59       	subi	r30, 0x9D	; 157
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	80 71       	andi	r24, 0x10	; 16
    1eec:	90 70       	andi	r25, 0x00	; 0
    1eee:	95 95       	asr	r25
    1ef0:	87 95       	ror	r24
    1ef2:	95 95       	asr	r25
    1ef4:	87 95       	ror	r24
    1ef6:	95 95       	asr	r25
    1ef8:	87 95       	ror	r24
    1efa:	95 95       	asr	r25
    1efc:	87 95       	ror	r24
    1efe:	98 2f       	mov	r25, r24
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	63 e0       	ldi	r22, 0x03	; 3
    1f04:	49 2f       	mov	r20, r25
    1f06:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	ed 59       	subi	r30, 0x9D	; 157
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	80 72       	andi	r24, 0x20	; 32
    1f18:	90 70       	andi	r25, 0x00	; 0
    1f1a:	95 95       	asr	r25
    1f1c:	87 95       	ror	r24
    1f1e:	95 95       	asr	r25
    1f20:	87 95       	ror	r24
    1f22:	95 95       	asr	r25
    1f24:	87 95       	ror	r24
    1f26:	95 95       	asr	r25
    1f28:	87 95       	ror	r24
    1f2a:	95 95       	asr	r25
    1f2c:	87 95       	ror	r24
    1f2e:	98 2f       	mov	r25, r24
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	64 e0       	ldi	r22, 0x04	; 4
    1f34:	49 2f       	mov	r20, r25
    1f36:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ed 59       	subi	r30, 0x9D	; 157
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	80 74       	andi	r24, 0x40	; 64
    1f48:	90 70       	andi	r25, 0x00	; 0
    1f4a:	08 2e       	mov	r0, r24
    1f4c:	89 2f       	mov	r24, r25
    1f4e:	00 0c       	add	r0, r0
    1f50:	88 1f       	adc	r24, r24
    1f52:	99 0b       	sbc	r25, r25
    1f54:	00 0c       	add	r0, r0
    1f56:	88 1f       	adc	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	65 e0       	ldi	r22, 0x05	; 5
    1f60:	49 2f       	mov	r20, r25
    1f62:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    1f66:	fe 01       	movw	r30, r28
    1f68:	ed 59       	subi	r30, 0x9D	; 157
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 81       	ld	r24, Z
    1f6e:	98 2f       	mov	r25, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	99 27       	eor	r25, r25
    1f74:	99 1f       	adc	r25, r25
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	66 e0       	ldi	r22, 0x06	; 6
    1f7a:	49 2f       	mov	r20, r25
    1f7c:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    1f80:	fe 01       	movw	r30, r28
    1f82:	ed 5b       	subi	r30, 0xBD	; 189
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e8       	ldi	r26, 0x80	; 128
    1f8c:	bf e3       	ldi	r27, 0x3F	; 63
    1f8e:	80 83       	st	Z, r24
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	a2 83       	std	Z+2, r26	; 0x02
    1f94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	8e 01       	movw	r16, r28
    1f98:	01 5c       	subi	r16, 0xC1	; 193
    1f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ed 5b       	subi	r30, 0xBD	; 189
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4a e7       	ldi	r20, 0x7A	; 122
    1fb0:	55 e4       	ldi	r21, 0x45	; 69
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	f8 01       	movw	r30, r16
    1fbc:	80 83       	st	Z, r24
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	a2 83       	std	Z+2, r26	; 0x02
    1fc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ff 96       	adiw	r30, 0x3f	; 63
    1fc8:	60 81       	ld	r22, Z
    1fca:	71 81       	ldd	r23, Z+1	; 0x01
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	2c f4       	brge	.+10     	; 0x1fea <LCD_displayCharacter+0x40e>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9e af       	std	Y+62, r25	; 0x3e
    1fe6:	8d af       	std	Y+61, r24	; 0x3d
    1fe8:	46 c0       	rjmp	.+140    	; 0x2076 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    1fea:	fe 01       	movw	r30, r28
    1fec:	ff 96       	adiw	r30, 0x3f	; 63
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	64 f5       	brge	.+88     	; 0x205e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	fe 01       	movw	r30, r28
    2008:	ed 5b       	subi	r30, 0xBD	; 189
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	60 81       	ld	r22, Z
    200e:	71 81       	ldd	r23, Z+1	; 0x01
    2010:	82 81       	ldd	r24, Z+2	; 0x02
    2012:	93 81       	ldd	r25, Z+3	; 0x03
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e af       	std	Y+62, r25	; 0x3e
    2032:	8d af       	std	Y+61, r24	; 0x3d
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <LCD_displayCharacter+0x478>
    2036:	80 e9       	ldi	r24, 0x90	; 144
    2038:	91 e0       	ldi	r25, 0x01	; 1
    203a:	9c af       	std	Y+60, r25	; 0x3c
    203c:	8b af       	std	Y+59, r24	; 0x3b
    203e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2040:	9c ad       	ldd	r25, Y+60	; 0x3c
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_displayCharacter+0x466>
    2046:	9c af       	std	Y+60, r25	; 0x3c
    2048:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	8d ad       	ldd	r24, Y+61	; 0x3d
    204c:	9e ad       	ldd	r25, Y+62	; 0x3e
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	9e af       	std	Y+62, r25	; 0x3e
    2052:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	8d ad       	ldd	r24, Y+61	; 0x3d
    2056:	9e ad       	ldd	r25, Y+62	; 0x3e
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <LCD_displayCharacter+0x45a>
    205c:	16 c0       	rjmp	.+44     	; 0x208a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	fe 01       	movw	r30, r28
    2060:	ff 96       	adiw	r30, 0x3f	; 63
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9e af       	std	Y+62, r25	; 0x3e
    2074:	8d af       	std	Y+61, r24	; 0x3d
    2076:	8d ad       	ldd	r24, Y+61	; 0x3d
    2078:	9e ad       	ldd	r25, Y+62	; 0x3e
    207a:	9a af       	std	Y+58, r25	; 0x3a
    207c:	89 af       	std	Y+57, r24	; 0x39
    207e:	89 ad       	ldd	r24, Y+57	; 0x39
    2080:	9a ad       	ldd	r25, Y+58	; 0x3a
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_displayCharacter+0x4a6>
    2086:	9a af       	std	Y+58, r25	; 0x3a
    2088:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	62 e0       	ldi	r22, 0x02	; 2
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 e8       	ldi	r26, 0x80	; 128
    209a:	bf e3       	ldi	r27, 0x3F	; 63
    209c:	8d ab       	std	Y+53, r24	; 0x35
    209e:	9e ab       	std	Y+54, r25	; 0x36
    20a0:	af ab       	std	Y+55, r26	; 0x37
    20a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	6d a9       	ldd	r22, Y+53	; 0x35
    20a6:	7e a9       	ldd	r23, Y+54	; 0x36
    20a8:	8f a9       	ldd	r24, Y+55	; 0x37
    20aa:	98 ad       	ldd	r25, Y+56	; 0x38
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a e7       	ldi	r20, 0x7A	; 122
    20b2:	55 e4       	ldi	r21, 0x45	; 69
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	89 ab       	std	Y+49, r24	; 0x31
    20be:	9a ab       	std	Y+50, r25	; 0x32
    20c0:	ab ab       	std	Y+51, r26	; 0x33
    20c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20c4:	69 a9       	ldd	r22, Y+49	; 0x31
    20c6:	7a a9       	ldd	r23, Y+50	; 0x32
    20c8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ca:	9c a9       	ldd	r25, Y+52	; 0x34
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	98 ab       	std	Y+48, r25	; 0x30
    20e2:	8f a7       	std	Y+47, r24	; 0x2f
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    20e6:	69 a9       	ldd	r22, Y+49	; 0x31
    20e8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ea:	8b a9       	ldd	r24, Y+51	; 0x33
    20ec:	9c a9       	ldd	r25, Y+52	; 0x34
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2100:	7e a9       	ldd	r23, Y+54	; 0x36
    2102:	8f a9       	ldd	r24, Y+55	; 0x37
    2104:	98 ad       	ldd	r25, Y+56	; 0x38
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	98 ab       	std	Y+48, r25	; 0x30
    2124:	8f a7       	std	Y+47, r24	; 0x2f
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <LCD_displayCharacter+0x56a>
    2128:	80 e9       	ldi	r24, 0x90	; 144
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	9e a7       	std	Y+46, r25	; 0x2e
    212e:	8d a7       	std	Y+45, r24	; 0x2d
    2130:	8d a5       	ldd	r24, Y+45	; 0x2d
    2132:	9e a5       	ldd	r25, Y+46	; 0x2e
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_displayCharacter+0x558>
    2138:	9e a7       	std	Y+46, r25	; 0x2e
    213a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8f a5       	ldd	r24, Y+47	; 0x2f
    213e:	98 a9       	ldd	r25, Y+48	; 0x30
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	98 ab       	std	Y+48, r25	; 0x30
    2144:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8f a5       	ldd	r24, Y+47	; 0x2f
    2148:	98 a9       	ldd	r25, Y+48	; 0x30
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <LCD_displayCharacter+0x54c>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	69 a9       	ldd	r22, Y+49	; 0x31
    2152:	7a a9       	ldd	r23, Y+50	; 0x32
    2154:	8b a9       	ldd	r24, Y+51	; 0x33
    2156:	9c a9       	ldd	r25, Y+52	; 0x34
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	98 ab       	std	Y+48, r25	; 0x30
    2162:	8f a7       	std	Y+47, r24	; 0x2f
    2164:	8f a5       	ldd	r24, Y+47	; 0x2f
    2166:	98 a9       	ldd	r25, Y+48	; 0x30
    2168:	9c a7       	std	Y+44, r25	; 0x2c
    216a:	8b a7       	std	Y+43, r24	; 0x2b
    216c:	8b a5       	ldd	r24, Y+43	; 0x2b
    216e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <LCD_displayCharacter+0x594>
    2174:	9c a7       	std	Y+44, r25	; 0x2c
    2176:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	62 e0       	ldi	r22, 0x02	; 2
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	8f a3       	std	Y+39, r24	; 0x27
    218c:	98 a7       	std	Y+40, r25	; 0x28
    218e:	a9 a7       	std	Y+41, r26	; 0x29
    2190:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6f a1       	ldd	r22, Y+39	; 0x27
    2194:	78 a5       	ldd	r23, Y+40	; 0x28
    2196:	89 a5       	ldd	r24, Y+41	; 0x29
    2198:	9a a5       	ldd	r25, Y+42	; 0x2a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	55 e4       	ldi	r21, 0x45	; 69
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8b a3       	std	Y+35, r24	; 0x23
    21ac:	9c a3       	std	Y+36, r25	; 0x24
    21ae:	ad a3       	std	Y+37, r26	; 0x25
    21b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21b2:	6b a1       	ldd	r22, Y+35	; 0x23
    21b4:	7c a1       	ldd	r23, Y+36	; 0x24
    21b6:	8d a1       	ldd	r24, Y+37	; 0x25
    21b8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9a a3       	std	Y+34, r25	; 0x22
    21d0:	89 a3       	std	Y+33, r24	; 0x21
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    21d4:	6b a1       	ldd	r22, Y+35	; 0x23
    21d6:	7c a1       	ldd	r23, Y+36	; 0x24
    21d8:	8d a1       	ldd	r24, Y+37	; 0x25
    21da:	9e a1       	ldd	r25, Y+38	; 0x26
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6f a1       	ldd	r22, Y+39	; 0x27
    21ee:	78 a5       	ldd	r23, Y+40	; 0x28
    21f0:	89 a5       	ldd	r24, Y+41	; 0x29
    21f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9a a3       	std	Y+34, r25	; 0x22
    2212:	89 a3       	std	Y+33, r24	; 0x21
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_displayCharacter+0x658>
    2216:	80 e9       	ldi	r24, 0x90	; 144
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	98 a3       	std	Y+32, r25	; 0x20
    221c:	8f 8f       	std	Y+31, r24	; 0x1f
    221e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2220:	98 a1       	ldd	r25, Y+32	; 0x20
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_displayCharacter+0x646>
    2226:	98 a3       	std	Y+32, r25	; 0x20
    2228:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	89 a1       	ldd	r24, Y+33	; 0x21
    222c:	9a a1       	ldd	r25, Y+34	; 0x22
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9a a3       	std	Y+34, r25	; 0x22
    2232:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	89 a1       	ldd	r24, Y+33	; 0x21
    2236:	9a a1       	ldd	r25, Y+34	; 0x22
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_displayCharacter+0x63a>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	6b a1       	ldd	r22, Y+35	; 0x23
    2240:	7c a1       	ldd	r23, Y+36	; 0x24
    2242:	8d a1       	ldd	r24, Y+37	; 0x25
    2244:	9e a1       	ldd	r25, Y+38	; 0x26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9a a3       	std	Y+34, r25	; 0x22
    2250:	89 a3       	std	Y+33, r24	; 0x21
    2252:	89 a1       	ldd	r24, Y+33	; 0x21
    2254:	9a a1       	ldd	r25, Y+34	; 0x22
    2256:	9e 8f       	std	Y+30, r25	; 0x1e
    2258:	8d 8f       	std	Y+29, r24	; 0x1d
    225a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    225c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_displayCharacter+0x682>
    2262:	9e 8f       	std	Y+30, r25	; 0x1e
    2264:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2266:	fe 01       	movw	r30, r28
    2268:	ed 59       	subi	r30, 0x9D	; 157
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	98 2f       	mov	r25, r24
    2270:	91 70       	andi	r25, 0x01	; 1
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	63 e0       	ldi	r22, 0x03	; 3
    2276:	49 2f       	mov	r20, r25
    2278:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    227c:	fe 01       	movw	r30, r28
    227e:	ed 59       	subi	r30, 0x9D	; 157
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	82 70       	andi	r24, 0x02	; 2
    228a:	90 70       	andi	r25, 0x00	; 0
    228c:	95 95       	asr	r25
    228e:	87 95       	ror	r24
    2290:	98 2f       	mov	r25, r24
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	64 e0       	ldi	r22, 0x04	; 4
    2296:	49 2f       	mov	r20, r25
    2298:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    229c:	fe 01       	movw	r30, r28
    229e:	ed 59       	subi	r30, 0x9D	; 157
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 81       	ld	r24, Z
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	84 70       	andi	r24, 0x04	; 4
    22aa:	90 70       	andi	r25, 0x00	; 0
    22ac:	95 95       	asr	r25
    22ae:	87 95       	ror	r24
    22b0:	95 95       	asr	r25
    22b2:	87 95       	ror	r24
    22b4:	98 2f       	mov	r25, r24
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	65 e0       	ldi	r22, 0x05	; 5
    22ba:	49 2f       	mov	r20, r25
    22bc:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    22c0:	fe 01       	movw	r30, r28
    22c2:	ed 59       	subi	r30, 0x9D	; 157
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	80 81       	ld	r24, Z
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	88 70       	andi	r24, 0x08	; 8
    22ce:	90 70       	andi	r25, 0x00	; 0
    22d0:	95 95       	asr	r25
    22d2:	87 95       	ror	r24
    22d4:	95 95       	asr	r25
    22d6:	87 95       	ror	r24
    22d8:	95 95       	asr	r25
    22da:	87 95       	ror	r24
    22dc:	98 2f       	mov	r25, r24
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	66 e0       	ldi	r22, 0x06	; 6
    22e2:	49 2f       	mov	r20, r25
    22e4:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a0 e8       	ldi	r26, 0x80	; 128
    22ee:	bf e3       	ldi	r27, 0x3F	; 63
    22f0:	89 8f       	std	Y+25, r24	; 0x19
    22f2:	9a 8f       	std	Y+26, r25	; 0x1a
    22f4:	ab 8f       	std	Y+27, r26	; 0x1b
    22f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	69 8d       	ldd	r22, Y+25	; 0x19
    22fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	55 e4       	ldi	r21, 0x45	; 69
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8d 8b       	std	Y+21, r24	; 0x15
    2312:	9e 8b       	std	Y+22, r25	; 0x16
    2314:	af 8b       	std	Y+23, r26	; 0x17
    2316:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2318:	6d 89       	ldd	r22, Y+21	; 0x15
    231a:	7e 89       	ldd	r23, Y+22	; 0x16
    231c:	8f 89       	ldd	r24, Y+23	; 0x17
    231e:	98 8d       	ldd	r25, Y+24	; 0x18
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9c 8b       	std	Y+20, r25	; 0x14
    2336:	8b 8b       	std	Y+19, r24	; 0x13
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    233a:	6d 89       	ldd	r22, Y+21	; 0x15
    233c:	7e 89       	ldd	r23, Y+22	; 0x16
    233e:	8f 89       	ldd	r24, Y+23	; 0x17
    2340:	98 8d       	ldd	r25, Y+24	; 0x18
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	69 8d       	ldd	r22, Y+25	; 0x19
    2354:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9c 8b       	std	Y+20, r25	; 0x14
    2378:	8b 8b       	std	Y+19, r24	; 0x13
    237a:	0f c0       	rjmp	.+30     	; 0x239a <LCD_displayCharacter+0x7be>
    237c:	80 e9       	ldi	r24, 0x90	; 144
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	9a 8b       	std	Y+18, r25	; 0x12
    2382:	89 8b       	std	Y+17, r24	; 0x11
    2384:	89 89       	ldd	r24, Y+17	; 0x11
    2386:	9a 89       	ldd	r25, Y+18	; 0x12
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_displayCharacter+0x7ac>
    238c:	9a 8b       	std	Y+18, r25	; 0x12
    238e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9c 8b       	std	Y+20, r25	; 0x14
    2398:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8b 89       	ldd	r24, Y+19	; 0x13
    239c:	9c 89       	ldd	r25, Y+20	; 0x14
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <LCD_displayCharacter+0x7a0>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6d 89       	ldd	r22, Y+21	; 0x15
    23a6:	7e 89       	ldd	r23, Y+22	; 0x16
    23a8:	8f 89       	ldd	r24, Y+23	; 0x17
    23aa:	98 8d       	ldd	r25, Y+24	; 0x18
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9c 8b       	std	Y+20, r25	; 0x14
    23b6:	8b 8b       	std	Y+19, r24	; 0x13
    23b8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ba:	9c 89       	ldd	r25, Y+20	; 0x14
    23bc:	98 8b       	std	Y+16, r25	; 0x10
    23be:	8f 87       	std	Y+15, r24	; 0x0f
    23c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c2:	98 89       	ldd	r25, Y+16	; 0x10
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <LCD_displayCharacter+0x7e8>
    23c8:	98 8b       	std	Y+16, r25	; 0x10
    23ca:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	62 e0       	ldi	r22, 0x02	; 2
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a0 e8       	ldi	r26, 0x80	; 128
    23dc:	bf e3       	ldi	r27, 0x3F	; 63
    23de:	8b 87       	std	Y+11, r24	; 0x0b
    23e0:	9c 87       	std	Y+12, r25	; 0x0c
    23e2:	ad 87       	std	Y+13, r26	; 0x0d
    23e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	4a e7       	ldi	r20, 0x7A	; 122
    23f4:	55 e4       	ldi	r21, 0x45	; 69
    23f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	8f 83       	std	Y+7, r24	; 0x07
    2400:	98 87       	std	Y+8, r25	; 0x08
    2402:	a9 87       	std	Y+9, r26	; 0x09
    2404:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2406:	6f 81       	ldd	r22, Y+7	; 0x07
    2408:	78 85       	ldd	r23, Y+8	; 0x08
    240a:	89 85       	ldd	r24, Y+9	; 0x09
    240c:	9a 85       	ldd	r25, Y+10	; 0x0a
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	2c f4       	brge	.+10     	; 0x2428 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	3f c0       	rjmp	.+126    	; 0x24a6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2428:	6f 81       	ldd	r22, Y+7	; 0x07
    242a:	78 85       	ldd	r23, Y+8	; 0x08
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	3f ef       	ldi	r19, 0xFF	; 255
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	57 e4       	ldi	r21, 0x47	; 71
    2438:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    243c:	18 16       	cp	r1, r24
    243e:	4c f5       	brge	.+82     	; 0x2492 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2440:	6b 85       	ldd	r22, Y+11	; 0x0b
    2442:	7c 85       	ldd	r23, Y+12	; 0x0c
    2444:	8d 85       	ldd	r24, Y+13	; 0x0d
    2446:	9e 85       	ldd	r25, Y+14	; 0x0e
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e2       	ldi	r20, 0x20	; 32
    244e:	51 e4       	ldi	r21, 0x41	; 65
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
    2468:	0f c0       	rjmp	.+30     	; 0x2488 <LCD_displayCharacter+0x8ac>
    246a:	80 e9       	ldi	r24, 0x90	; 144
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_displayCharacter+0x89a>
    247a:	9c 83       	std	Y+4, r25	; 0x04
    247c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	9e 81       	ldd	r25, Y+6	; 0x06
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	69 f7       	brne	.-38     	; 0x246a <LCD_displayCharacter+0x88e>
    2490:	14 c0       	rjmp	.+40     	; 0x24ba <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	9a 81       	ldd	r25, Y+2	; 0x02
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <LCD_displayCharacter+0x8d6>
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24ba:	cd 59       	subi	r28, 0x9D	; 157
    24bc:	df 4f       	sbci	r29, 0xFF	; 255
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	08 95       	ret

000024d2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <LCD_displayString+0x6>
    24d8:	0f 92       	push	r0
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	9b 83       	std	Y+3, r25	; 0x03
    24e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	0e c0       	rjmp	.+28     	; 0x2502 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	9b 81       	ldd	r25, Y+3	; 0x03
    24f0:	fc 01       	movw	r30, r24
    24f2:	e2 0f       	add	r30, r18
    24f4:	f3 1f       	adc	r31, r19
    24f6:	80 81       	ld	r24, Z
    24f8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_displayCharacter>
		i++;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	fc 01       	movw	r30, r24
    250e:	e2 0f       	add	r30, r18
    2510:	f3 1f       	adc	r31, r19
    2512:	80 81       	ld	r24, Z
    2514:	88 23       	and	r24, r24
    2516:	39 f7       	brne	.-50     	; 0x24e6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <LCD_moveCursor+0x6>
    252a:	00 d0       	rcall	.+0      	; 0x252c <LCD_moveCursor+0x8>
    252c:	0f 92       	push	r0
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	8a 83       	std	Y+2, r24	; 0x02
    2534:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	3d 83       	std	Y+5, r19	; 0x05
    253e:	2c 83       	std	Y+4, r18	; 0x04
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	9d 81       	ldd	r25, Y+5	; 0x05
    2544:	81 30       	cpi	r24, 0x01	; 1
    2546:	91 05       	cpc	r25, r1
    2548:	c1 f0       	breq	.+48     	; 0x257a <LCD_moveCursor+0x56>
    254a:	2c 81       	ldd	r18, Y+4	; 0x04
    254c:	3d 81       	ldd	r19, Y+5	; 0x05
    254e:	22 30       	cpi	r18, 0x02	; 2
    2550:	31 05       	cpc	r19, r1
    2552:	2c f4       	brge	.+10     	; 0x255e <LCD_moveCursor+0x3a>
    2554:	8c 81       	ldd	r24, Y+4	; 0x04
    2556:	9d 81       	ldd	r25, Y+5	; 0x05
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	61 f0       	breq	.+24     	; 0x2574 <LCD_moveCursor+0x50>
    255c:	19 c0       	rjmp	.+50     	; 0x2590 <LCD_moveCursor+0x6c>
    255e:	2c 81       	ldd	r18, Y+4	; 0x04
    2560:	3d 81       	ldd	r19, Y+5	; 0x05
    2562:	22 30       	cpi	r18, 0x02	; 2
    2564:	31 05       	cpc	r19, r1
    2566:	69 f0       	breq	.+26     	; 0x2582 <LCD_moveCursor+0x5e>
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	83 30       	cpi	r24, 0x03	; 3
    256e:	91 05       	cpc	r25, r1
    2570:	61 f0       	breq	.+24     	; 0x258a <LCD_moveCursor+0x66>
    2572:	0e c0       	rjmp	.+28     	; 0x2590 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	0b c0       	rjmp	.+22     	; 0x2590 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	80 5c       	subi	r24, 0xC0	; 192
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	07 c0       	rjmp	.+14     	; 0x2590 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	80 5f       	subi	r24, 0xF0	; 240
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	80 5b       	subi	r24, 0xB0	; 176
    258e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	80 68       	ori	r24, 0x80	; 128
    2594:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
}
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <LCD_displayStringRowColumn+0x6>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <LCD_displayStringRowColumn+0x8>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	6a 83       	std	Y+2, r22	; 0x02
    25b8:	5c 83       	std	Y+4, r21	; 0x04
    25ba:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	6a 81       	ldd	r22, Y+2	; 0x02
    25c0:	0e 94 92 12 	call	0x2524	; 0x2524 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	0e 94 69 12 	call	0x24d2	; 0x24d2 <LCD_displayString>
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	62 97       	sbiw	r28, 0x12	; 18
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	9a 8b       	std	Y+18, r25	; 0x12
    25f0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    25f2:	89 89       	ldd	r24, Y+17	; 0x11
    25f4:	9a 89       	ldd	r25, Y+18	; 0x12
    25f6:	9e 01       	movw	r18, r28
    25f8:	2f 5f       	subi	r18, 0xFF	; 255
    25fa:	3f 4f       	sbci	r19, 0xFF	; 255
    25fc:	b9 01       	movw	r22, r18
    25fe:	4a e0       	ldi	r20, 0x0A	; 10
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	0e 94 63 19 	call	0x32c6	; 0x32c6 <itoa>
   LCD_displayString(buff); /* Display the string */
    2606:	ce 01       	movw	r24, r28
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <LCD_displayString>
}
    260e:	62 96       	adiw	r28, 0x12	; 18
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
}
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    2634:	1f 92       	push	r1
    2636:	0f 92       	push	r0
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	0f 92       	push	r0
    263c:	11 24       	eor	r1, r1
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    265e:	80 91 91 01 	lds	r24, 0x0191
    2662:	90 91 92 01 	lds	r25, 0x0192
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	29 f0       	breq	.+10     	; 0x2674 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    266a:	e0 91 91 01 	lds	r30, 0x0191
    266e:	f0 91 92 01 	lds	r31, 0x0192
    2672:	09 95       	icall
	}
}
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	ff 91       	pop	r31
    267a:	ef 91       	pop	r30
    267c:	bf 91       	pop	r27
    267e:	af 91       	pop	r26
    2680:	9f 91       	pop	r25
    2682:	8f 91       	pop	r24
    2684:	7f 91       	pop	r23
    2686:	6f 91       	pop	r22
    2688:	5f 91       	pop	r21
    268a:	4f 91       	pop	r20
    268c:	3f 91       	pop	r19
    268e:	2f 91       	pop	r18
    2690:	0f 90       	pop	r0
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	0f 90       	pop	r0
    2696:	1f 90       	pop	r1
    2698:	18 95       	reti

0000269a <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <ICU_init+0x6>
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1 << PD6);
    26a8:	a1 e3       	ldi	r26, 0x31	; 49
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e1 e3       	ldi	r30, 0x31	; 49
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	8f 7b       	andi	r24, 0xBF	; 191
    26b4:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    26b6:	ef e4       	ldi	r30, 0x4F	; 79
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	8c e0       	ldi	r24, 0x0C	; 12
    26bc:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    26be:	ae e4       	ldi	r26, 0x4E	; 78
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	ee e4       	ldi	r30, 0x4E	; 78
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	98 2f       	mov	r25, r24
    26ca:	98 7f       	andi	r25, 0xF8	; 248
    26cc:	e9 81       	ldd	r30, Y+1	; 0x01
    26ce:	fa 81       	ldd	r31, Y+2	; 0x02
    26d0:	80 81       	ld	r24, Z
    26d2:	89 2b       	or	r24, r25
    26d4:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge) << 6);
    26d6:	ae e4       	ldi	r26, 0x4E	; 78
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ee e4       	ldi	r30, 0x4E	; 78
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	28 2f       	mov	r18, r24
    26e2:	2f 7b       	andi	r18, 0xBF	; 191
    26e4:	e9 81       	ldd	r30, Y+1	; 0x01
    26e6:	fa 81       	ldd	r31, Y+2	; 0x02
    26e8:	81 81       	ldd	r24, Z+1	; 0x01
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	00 24       	eor	r0, r0
    26f0:	96 95       	lsr	r25
    26f2:	87 95       	ror	r24
    26f4:	07 94       	ror	r0
    26f6:	96 95       	lsr	r25
    26f8:	87 95       	ror	r24
    26fa:	07 94       	ror	r0
    26fc:	98 2f       	mov	r25, r24
    26fe:	80 2d       	mov	r24, r0
    2700:	82 2b       	or	r24, r18
    2702:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    2704:	ec e4       	ldi	r30, 0x4C	; 76
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	11 82       	std	Z+1, r1	; 0x01
    270a:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    270c:	e6 e4       	ldi	r30, 0x46	; 70
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	11 82       	std	Z+1, r1	; 0x01
    2712:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1 << TICIE1);
    2714:	a9 e5       	ldi	r26, 0x59	; 89
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e9 e5       	ldi	r30, 0x59	; 89
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	80 62       	ori	r24, 0x20	; 32
    2720:	8c 93       	st	X, r24
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	00 d0       	rcall	.+0      	; 0x2732 <ICU_setCallBack+0x6>
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	9a 83       	std	Y+2, r25	; 0x02
    2738:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	9a 81       	ldd	r25, Y+2	; 0x02
    273e:	90 93 92 01 	sts	0x0192, r25
    2742:	80 93 91 01 	sts	0x0191, r24
}
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	0f 92       	push	r0
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType << 6);
    275c:	ae e4       	ldi	r26, 0x4E	; 78
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	ee e4       	ldi	r30, 0x4E	; 78
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	28 2f       	mov	r18, r24
    2768:	2f 7b       	andi	r18, 0xBF	; 191
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	88 2f       	mov	r24, r24
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	00 24       	eor	r0, r0
    2772:	96 95       	lsr	r25
    2774:	87 95       	ror	r24
    2776:	07 94       	ror	r0
    2778:	96 95       	lsr	r25
    277a:	87 95       	ror	r24
    277c:	07 94       	ror	r0
    277e:	98 2f       	mov	r25, r24
    2780:	80 2d       	mov	r24, r0
    2782:	82 2b       	or	r24, r18
    2784:	8c 93       	st	X, r24
}
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2796:	e6 e4       	ldi	r30, 0x46	; 70
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
}
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    27ac:	ec e4       	ldi	r30, 0x4C	; 76
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	11 82       	std	Z+1, r1	; 0x01
    27b2:	10 82       	st	Z, r1
}
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    27c2:	ef e4       	ldi	r30, 0x4F	; 79
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	10 82       	st	Z, r1
	TCCR1B = 0;
    27c8:	ee e4       	ldi	r30, 0x4E	; 78
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	10 82       	st	Z, r1
	TCNT1 = 0;
    27ce:	ec e4       	ldi	r30, 0x4C	; 76
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	11 82       	std	Z+1, r1	; 0x01
    27d4:	10 82       	st	Z, r1
	ICR1 = 0;
    27d6:	e6 e4       	ldi	r30, 0x46	; 70
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	11 82       	std	Z+1, r1	; 0x01
    27dc:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1 << TICIE1);
    27de:	a9 e5       	ldi	r26, 0x59	; 89
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e9 e5       	ldi	r30, 0x59	; 89
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8f 7d       	andi	r24, 0xDF	; 223
    27ea:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    27ec:	10 92 92 01 	sts	0x0192, r1
    27f0:	10 92 91 01 	sts	0x0191, r1
}
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <GPIO_setupPinDirection+0x6>
    2800:	00 d0       	rcall	.+0      	; 0x2802 <GPIO_setupPinDirection+0x8>
    2802:	0f 92       	push	r0
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	6a 83       	std	Y+2, r22	; 0x02
    280c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	88 30       	cpi	r24, 0x08	; 8
    2812:	08 f0       	brcs	.+2      	; 0x2816 <GPIO_setupPinDirection+0x1c>
    2814:	d5 c0       	rjmp	.+426    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	84 30       	cpi	r24, 0x04	; 4
    281a:	08 f0       	brcs	.+2      	; 0x281e <GPIO_setupPinDirection+0x24>
    281c:	d1 c0       	rjmp	.+418    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	3d 83       	std	Y+5, r19	; 0x05
    2826:	2c 83       	std	Y+4, r18	; 0x04
    2828:	8c 81       	ldd	r24, Y+4	; 0x04
    282a:	9d 81       	ldd	r25, Y+5	; 0x05
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	91 05       	cpc	r25, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <GPIO_setupPinDirection+0x3a>
    2832:	43 c0       	rjmp	.+134    	; 0x28ba <GPIO_setupPinDirection+0xc0>
    2834:	2c 81       	ldd	r18, Y+4	; 0x04
    2836:	3d 81       	ldd	r19, Y+5	; 0x05
    2838:	22 30       	cpi	r18, 0x02	; 2
    283a:	31 05       	cpc	r19, r1
    283c:	2c f4       	brge	.+10     	; 0x2848 <GPIO_setupPinDirection+0x4e>
    283e:	8c 81       	ldd	r24, Y+4	; 0x04
    2840:	9d 81       	ldd	r25, Y+5	; 0x05
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	71 f0       	breq	.+28     	; 0x2862 <GPIO_setupPinDirection+0x68>
    2846:	bc c0       	rjmp	.+376    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
    2848:	2c 81       	ldd	r18, Y+4	; 0x04
    284a:	3d 81       	ldd	r19, Y+5	; 0x05
    284c:	22 30       	cpi	r18, 0x02	; 2
    284e:	31 05       	cpc	r19, r1
    2850:	09 f4       	brne	.+2      	; 0x2854 <GPIO_setupPinDirection+0x5a>
    2852:	5f c0       	rjmp	.+190    	; 0x2912 <GPIO_setupPinDirection+0x118>
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	9d 81       	ldd	r25, Y+5	; 0x05
    2858:	83 30       	cpi	r24, 0x03	; 3
    285a:	91 05       	cpc	r25, r1
    285c:	09 f4       	brne	.+2      	; 0x2860 <GPIO_setupPinDirection+0x66>
    285e:	85 c0       	rjmp	.+266    	; 0x296a <GPIO_setupPinDirection+0x170>
    2860:	af c0       	rjmp	.+350    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	a1 f4       	brne	.+40     	; 0x2890 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2868:	aa e3       	ldi	r26, 0x3A	; 58
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ea e3       	ldi	r30, 0x3A	; 58
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	48 2f       	mov	r20, r24
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	02 2e       	mov	r0, r18
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <GPIO_setupPinDirection+0x8c>
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	0a 94       	dec	r0
    2888:	e2 f7       	brpl	.-8      	; 0x2882 <GPIO_setupPinDirection+0x88>
    288a:	84 2b       	or	r24, r20
    288c:	8c 93       	st	X, r24
    288e:	98 c0       	rjmp	.+304    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2890:	aa e3       	ldi	r26, 0x3A	; 58
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ea e3       	ldi	r30, 0x3A	; 58
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	48 2f       	mov	r20, r24
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	02 2e       	mov	r0, r18
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <GPIO_setupPinDirection+0xb4>
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	0a 94       	dec	r0
    28b0:	e2 f7       	brpl	.-8      	; 0x28aa <GPIO_setupPinDirection+0xb0>
    28b2:	80 95       	com	r24
    28b4:	84 23       	and	r24, r20
    28b6:	8c 93       	st	X, r24
    28b8:	83 c0       	rjmp	.+262    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	81 30       	cpi	r24, 0x01	; 1
    28be:	a1 f4       	brne	.+40     	; 0x28e8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    28c0:	a7 e3       	ldi	r26, 0x37	; 55
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e7 e3       	ldi	r30, 0x37	; 55
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	48 2f       	mov	r20, r24
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	02 2e       	mov	r0, r18
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <GPIO_setupPinDirection+0xe4>
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	0a 94       	dec	r0
    28e0:	e2 f7       	brpl	.-8      	; 0x28da <GPIO_setupPinDirection+0xe0>
    28e2:	84 2b       	or	r24, r20
    28e4:	8c 93       	st	X, r24
    28e6:	6c c0       	rjmp	.+216    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    28e8:	a7 e3       	ldi	r26, 0x37	; 55
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e7 e3       	ldi	r30, 0x37	; 55
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	48 2f       	mov	r20, r24
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	02 2e       	mov	r0, r18
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <GPIO_setupPinDirection+0x10c>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	0a 94       	dec	r0
    2908:	e2 f7       	brpl	.-8      	; 0x2902 <GPIO_setupPinDirection+0x108>
    290a:	80 95       	com	r24
    290c:	84 23       	and	r24, r20
    290e:	8c 93       	st	X, r24
    2910:	57 c0       	rjmp	.+174    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	a1 f4       	brne	.+40     	; 0x2940 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2918:	a4 e3       	ldi	r26, 0x34	; 52
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e4 e3       	ldi	r30, 0x34	; 52
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	48 2f       	mov	r20, r24
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	02 2e       	mov	r0, r18
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <GPIO_setupPinDirection+0x13c>
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	0a 94       	dec	r0
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <GPIO_setupPinDirection+0x138>
    293a:	84 2b       	or	r24, r20
    293c:	8c 93       	st	X, r24
    293e:	40 c0       	rjmp	.+128    	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2940:	a4 e3       	ldi	r26, 0x34	; 52
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e4 e3       	ldi	r30, 0x34	; 52
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	48 2f       	mov	r20, r24
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	02 2e       	mov	r0, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <GPIO_setupPinDirection+0x164>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	0a 94       	dec	r0
    2960:	e2 f7       	brpl	.-8      	; 0x295a <GPIO_setupPinDirection+0x160>
    2962:	80 95       	com	r24
    2964:	84 23       	and	r24, r20
    2966:	8c 93       	st	X, r24
    2968:	2b c0       	rjmp	.+86     	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	a1 f4       	brne	.+40     	; 0x2998 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2970:	a1 e3       	ldi	r26, 0x31	; 49
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e1 e3       	ldi	r30, 0x31	; 49
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	48 2f       	mov	r20, r24
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	02 2e       	mov	r0, r18
    2988:	02 c0       	rjmp	.+4      	; 0x298e <GPIO_setupPinDirection+0x194>
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	0a 94       	dec	r0
    2990:	e2 f7       	brpl	.-8      	; 0x298a <GPIO_setupPinDirection+0x190>
    2992:	84 2b       	or	r24, r20
    2994:	8c 93       	st	X, r24
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2998:	a1 e3       	ldi	r26, 0x31	; 49
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e1 e3       	ldi	r30, 0x31	; 49
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	48 2f       	mov	r20, r24
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	02 2e       	mov	r0, r18
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <GPIO_setupPinDirection+0x1bc>
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	0a 94       	dec	r0
    29b8:	e2 f7       	brpl	.-8      	; 0x29b2 <GPIO_setupPinDirection+0x1b8>
    29ba:	80 95       	com	r24
    29bc:	84 23       	and	r24, r20
    29be:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <GPIO_writePin+0x6>
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <GPIO_writePin+0x8>
    29d8:	0f 92       	push	r0
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	6a 83       	std	Y+2, r22	; 0x02
    29e2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	88 30       	cpi	r24, 0x08	; 8
    29e8:	08 f0       	brcs	.+2      	; 0x29ec <GPIO_writePin+0x1c>
    29ea:	d5 c0       	rjmp	.+426    	; 0x2b96 <GPIO_writePin+0x1c6>
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	84 30       	cpi	r24, 0x04	; 4
    29f0:	08 f0       	brcs	.+2      	; 0x29f4 <GPIO_writePin+0x24>
    29f2:	d1 c0       	rjmp	.+418    	; 0x2b96 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	3d 83       	std	Y+5, r19	; 0x05
    29fc:	2c 83       	std	Y+4, r18	; 0x04
    29fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2a00:	9d 81       	ldd	r25, Y+5	; 0x05
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	91 05       	cpc	r25, r1
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <GPIO_writePin+0x3a>
    2a08:	43 c0       	rjmp	.+134    	; 0x2a90 <GPIO_writePin+0xc0>
    2a0a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a0c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a0e:	22 30       	cpi	r18, 0x02	; 2
    2a10:	31 05       	cpc	r19, r1
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <GPIO_writePin+0x4e>
    2a14:	8c 81       	ldd	r24, Y+4	; 0x04
    2a16:	9d 81       	ldd	r25, Y+5	; 0x05
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	71 f0       	breq	.+28     	; 0x2a38 <GPIO_writePin+0x68>
    2a1c:	bc c0       	rjmp	.+376    	; 0x2b96 <GPIO_writePin+0x1c6>
    2a1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a20:	3d 81       	ldd	r19, Y+5	; 0x05
    2a22:	22 30       	cpi	r18, 0x02	; 2
    2a24:	31 05       	cpc	r19, r1
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <GPIO_writePin+0x5a>
    2a28:	5f c0       	rjmp	.+190    	; 0x2ae8 <GPIO_writePin+0x118>
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2e:	83 30       	cpi	r24, 0x03	; 3
    2a30:	91 05       	cpc	r25, r1
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <GPIO_writePin+0x66>
    2a34:	85 c0       	rjmp	.+266    	; 0x2b40 <GPIO_writePin+0x170>
    2a36:	af c0       	rjmp	.+350    	; 0x2b96 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	a1 f4       	brne	.+40     	; 0x2a66 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2a3e:	ab e3       	ldi	r26, 0x3B	; 59
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	eb e3       	ldi	r30, 0x3B	; 59
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	48 2f       	mov	r20, r24
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	28 2f       	mov	r18, r24
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	02 2e       	mov	r0, r18
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <GPIO_writePin+0x8c>
    2a58:	88 0f       	add	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	0a 94       	dec	r0
    2a5e:	e2 f7       	brpl	.-8      	; 0x2a58 <GPIO_writePin+0x88>
    2a60:	84 2b       	or	r24, r20
    2a62:	8c 93       	st	X, r24
    2a64:	98 c0       	rjmp	.+304    	; 0x2b96 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2a66:	ab e3       	ldi	r26, 0x3B	; 59
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	eb e3       	ldi	r30, 0x3B	; 59
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	48 2f       	mov	r20, r24
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 2e       	mov	r0, r18
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <GPIO_writePin+0xb4>
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	0a 94       	dec	r0
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <GPIO_writePin+0xb0>
    2a88:	80 95       	com	r24
    2a8a:	84 23       	and	r24, r20
    2a8c:	8c 93       	st	X, r24
    2a8e:	83 c0       	rjmp	.+262    	; 0x2b96 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	a1 f4       	brne	.+40     	; 0x2abe <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2a96:	a8 e3       	ldi	r26, 0x38	; 56
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e8 e3       	ldi	r30, 0x38	; 56
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	48 2f       	mov	r20, r24
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	02 2e       	mov	r0, r18
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <GPIO_writePin+0xe4>
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	0a 94       	dec	r0
    2ab6:	e2 f7       	brpl	.-8      	; 0x2ab0 <GPIO_writePin+0xe0>
    2ab8:	84 2b       	or	r24, r20
    2aba:	8c 93       	st	X, r24
    2abc:	6c c0       	rjmp	.+216    	; 0x2b96 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2abe:	a8 e3       	ldi	r26, 0x38	; 56
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e8 e3       	ldi	r30, 0x38	; 56
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	48 2f       	mov	r20, r24
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	02 2e       	mov	r0, r18
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <GPIO_writePin+0x10c>
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	0a 94       	dec	r0
    2ade:	e2 f7       	brpl	.-8      	; 0x2ad8 <GPIO_writePin+0x108>
    2ae0:	80 95       	com	r24
    2ae2:	84 23       	and	r24, r20
    2ae4:	8c 93       	st	X, r24
    2ae6:	57 c0       	rjmp	.+174    	; 0x2b96 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	81 30       	cpi	r24, 0x01	; 1
    2aec:	a1 f4       	brne	.+40     	; 0x2b16 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2aee:	a5 e3       	ldi	r26, 0x35	; 53
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e5 e3       	ldi	r30, 0x35	; 53
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	48 2f       	mov	r20, r24
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	02 2e       	mov	r0, r18
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <GPIO_writePin+0x13c>
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	0a 94       	dec	r0
    2b0e:	e2 f7       	brpl	.-8      	; 0x2b08 <GPIO_writePin+0x138>
    2b10:	84 2b       	or	r24, r20
    2b12:	8c 93       	st	X, r24
    2b14:	40 c0       	rjmp	.+128    	; 0x2b96 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2b16:	a5 e3       	ldi	r26, 0x35	; 53
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e5 e3       	ldi	r30, 0x35	; 53
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	48 2f       	mov	r20, r24
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	02 2e       	mov	r0, r18
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <GPIO_writePin+0x164>
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	0a 94       	dec	r0
    2b36:	e2 f7       	brpl	.-8      	; 0x2b30 <GPIO_writePin+0x160>
    2b38:	80 95       	com	r24
    2b3a:	84 23       	and	r24, r20
    2b3c:	8c 93       	st	X, r24
    2b3e:	2b c0       	rjmp	.+86     	; 0x2b96 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	a1 f4       	brne	.+40     	; 0x2b6e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2b46:	a2 e3       	ldi	r26, 0x32	; 50
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e2 e3       	ldi	r30, 0x32	; 50
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	48 2f       	mov	r20, r24
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	28 2f       	mov	r18, r24
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	02 2e       	mov	r0, r18
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <GPIO_writePin+0x194>
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	0a 94       	dec	r0
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <GPIO_writePin+0x190>
    2b68:	84 2b       	or	r24, r20
    2b6a:	8c 93       	st	X, r24
    2b6c:	14 c0       	rjmp	.+40     	; 0x2b96 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2b6e:	a2 e3       	ldi	r26, 0x32	; 50
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e2 e3       	ldi	r30, 0x32	; 50
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	48 2f       	mov	r20, r24
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	02 2e       	mov	r0, r18
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <GPIO_writePin+0x1bc>
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	0a 94       	dec	r0
    2b8e:	e2 f7       	brpl	.-8      	; 0x2b88 <GPIO_writePin+0x1b8>
    2b90:	80 95       	com	r24
    2b92:	84 23       	and	r24, r20
    2b94:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <GPIO_readPin+0x6>
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <GPIO_readPin+0x8>
    2bae:	0f 92       	push	r0
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	8a 83       	std	Y+2, r24	; 0x02
    2bb6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2bb8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	88 30       	cpi	r24, 0x08	; 8
    2bbe:	08 f0       	brcs	.+2      	; 0x2bc2 <GPIO_readPin+0x1c>
    2bc0:	84 c0       	rjmp	.+264    	; 0x2cca <GPIO_readPin+0x124>
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	84 30       	cpi	r24, 0x04	; 4
    2bc6:	08 f0       	brcs	.+2      	; 0x2bca <GPIO_readPin+0x24>
    2bc8:	80 c0       	rjmp	.+256    	; 0x2cca <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	3d 83       	std	Y+5, r19	; 0x05
    2bd2:	2c 83       	std	Y+4, r18	; 0x04
    2bd4:	4c 81       	ldd	r20, Y+4	; 0x04
    2bd6:	5d 81       	ldd	r21, Y+5	; 0x05
    2bd8:	41 30       	cpi	r20, 0x01	; 1
    2bda:	51 05       	cpc	r21, r1
    2bdc:	79 f1       	breq	.+94     	; 0x2c3c <GPIO_readPin+0x96>
    2bde:	8c 81       	ldd	r24, Y+4	; 0x04
    2be0:	9d 81       	ldd	r25, Y+5	; 0x05
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	91 05       	cpc	r25, r1
    2be6:	34 f4       	brge	.+12     	; 0x2bf4 <GPIO_readPin+0x4e>
    2be8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bea:	3d 81       	ldd	r19, Y+5	; 0x05
    2bec:	21 15       	cp	r18, r1
    2bee:	31 05       	cpc	r19, r1
    2bf0:	69 f0       	breq	.+26     	; 0x2c0c <GPIO_readPin+0x66>
    2bf2:	6b c0       	rjmp	.+214    	; 0x2cca <GPIO_readPin+0x124>
    2bf4:	4c 81       	ldd	r20, Y+4	; 0x04
    2bf6:	5d 81       	ldd	r21, Y+5	; 0x05
    2bf8:	42 30       	cpi	r20, 0x02	; 2
    2bfa:	51 05       	cpc	r21, r1
    2bfc:	b9 f1       	breq	.+110    	; 0x2c6c <GPIO_readPin+0xc6>
    2bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2c00:	9d 81       	ldd	r25, Y+5	; 0x05
    2c02:	83 30       	cpi	r24, 0x03	; 3
    2c04:	91 05       	cpc	r25, r1
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <GPIO_readPin+0x64>
    2c08:	49 c0       	rjmp	.+146    	; 0x2c9c <GPIO_readPin+0xf6>
    2c0a:	5f c0       	rjmp	.+190    	; 0x2cca <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2c0c:	e9 e3       	ldi	r30, 0x39	; 57
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	a9 01       	movw	r20, r18
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <GPIO_readPin+0x7e>
    2c20:	55 95       	asr	r21
    2c22:	47 95       	ror	r20
    2c24:	8a 95       	dec	r24
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <GPIO_readPin+0x7a>
    2c28:	ca 01       	movw	r24, r20
    2c2a:	81 70       	andi	r24, 0x01	; 1
    2c2c:	90 70       	andi	r25, 0x00	; 0
    2c2e:	88 23       	and	r24, r24
    2c30:	19 f0       	breq	.+6      	; 0x2c38 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	49 c0       	rjmp	.+146    	; 0x2cca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c38:	19 82       	std	Y+1, r1	; 0x01
    2c3a:	47 c0       	rjmp	.+142    	; 0x2cca <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2c3c:	e6 e3       	ldi	r30, 0x36	; 54
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	a9 01       	movw	r20, r18
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <GPIO_readPin+0xae>
    2c50:	55 95       	asr	r21
    2c52:	47 95       	ror	r20
    2c54:	8a 95       	dec	r24
    2c56:	e2 f7       	brpl	.-8      	; 0x2c50 <GPIO_readPin+0xaa>
    2c58:	ca 01       	movw	r24, r20
    2c5a:	81 70       	andi	r24, 0x01	; 1
    2c5c:	90 70       	andi	r25, 0x00	; 0
    2c5e:	88 23       	and	r24, r24
    2c60:	19 f0       	breq	.+6      	; 0x2c68 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	89 83       	std	Y+1, r24	; 0x01
    2c66:	31 c0       	rjmp	.+98     	; 0x2cca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c68:	19 82       	std	Y+1, r1	; 0x01
    2c6a:	2f c0       	rjmp	.+94     	; 0x2cca <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2c6c:	e3 e3       	ldi	r30, 0x33	; 51
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	28 2f       	mov	r18, r24
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a9 01       	movw	r20, r18
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <GPIO_readPin+0xde>
    2c80:	55 95       	asr	r21
    2c82:	47 95       	ror	r20
    2c84:	8a 95       	dec	r24
    2c86:	e2 f7       	brpl	.-8      	; 0x2c80 <GPIO_readPin+0xda>
    2c88:	ca 01       	movw	r24, r20
    2c8a:	81 70       	andi	r24, 0x01	; 1
    2c8c:	90 70       	andi	r25, 0x00	; 0
    2c8e:	88 23       	and	r24, r24
    2c90:	19 f0       	breq	.+6      	; 0x2c98 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	19 c0       	rjmp	.+50     	; 0x2cca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c98:	19 82       	std	Y+1, r1	; 0x01
    2c9a:	17 c0       	rjmp	.+46     	; 0x2cca <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2c9c:	e0 e3       	ldi	r30, 0x30	; 48
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	88 2f       	mov	r24, r24
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	a9 01       	movw	r20, r18
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <GPIO_readPin+0x10e>
    2cb0:	55 95       	asr	r21
    2cb2:	47 95       	ror	r20
    2cb4:	8a 95       	dec	r24
    2cb6:	e2 f7       	brpl	.-8      	; 0x2cb0 <GPIO_readPin+0x10a>
    2cb8:	ca 01       	movw	r24, r20
    2cba:	81 70       	andi	r24, 0x01	; 1
    2cbc:	90 70       	andi	r25, 0x00	; 0
    2cbe:	88 23       	and	r24, r24
    2cc0:	19 f0       	breq	.+6      	; 0x2cc8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	89 83       	std	Y+1, r24	; 0x01
    2cc6:	01 c0       	rjmp	.+2      	; 0x2cca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2cc8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <GPIO_setupPortDirection+0x6>
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <GPIO_setupPortDirection+0x8>
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	84 30       	cpi	r24, 0x04	; 4
    2cf0:	90 f5       	brcc	.+100    	; 0x2d56 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	3c 83       	std	Y+4, r19	; 0x04
    2cfa:	2b 83       	std	Y+3, r18	; 0x03
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	81 30       	cpi	r24, 0x01	; 1
    2d02:	91 05       	cpc	r25, r1
    2d04:	d1 f0       	breq	.+52     	; 0x2d3a <GPIO_setupPortDirection+0x5e>
    2d06:	2b 81       	ldd	r18, Y+3	; 0x03
    2d08:	3c 81       	ldd	r19, Y+4	; 0x04
    2d0a:	22 30       	cpi	r18, 0x02	; 2
    2d0c:	31 05       	cpc	r19, r1
    2d0e:	2c f4       	brge	.+10     	; 0x2d1a <GPIO_setupPortDirection+0x3e>
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	9c 81       	ldd	r25, Y+4	; 0x04
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	61 f0       	breq	.+24     	; 0x2d30 <GPIO_setupPortDirection+0x54>
    2d18:	1e c0       	rjmp	.+60     	; 0x2d56 <GPIO_setupPortDirection+0x7a>
    2d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d1e:	22 30       	cpi	r18, 0x02	; 2
    2d20:	31 05       	cpc	r19, r1
    2d22:	81 f0       	breq	.+32     	; 0x2d44 <GPIO_setupPortDirection+0x68>
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	83 30       	cpi	r24, 0x03	; 3
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	81 f0       	breq	.+32     	; 0x2d4e <GPIO_setupPortDirection+0x72>
    2d2e:	13 c0       	rjmp	.+38     	; 0x2d56 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2d30:	ea e3       	ldi	r30, 0x3A	; 58
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	80 83       	st	Z, r24
    2d38:	0e c0       	rjmp	.+28     	; 0x2d56 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2d3a:	e7 e3       	ldi	r30, 0x37	; 55
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	80 83       	st	Z, r24
    2d42:	09 c0       	rjmp	.+18     	; 0x2d56 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2d44:	e4 e3       	ldi	r30, 0x34	; 52
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	80 83       	st	Z, r24
    2d4c:	04 c0       	rjmp	.+8      	; 0x2d56 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2d4e:	e1 e3       	ldi	r30, 0x31	; 49
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	80 83       	st	Z, r24
			break;
		}
	}
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <GPIO_writePort+0x6>
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <GPIO_writePort+0x8>
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	84 30       	cpi	r24, 0x04	; 4
    2d78:	90 f5       	brcc	.+100    	; 0x2dde <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	3c 83       	std	Y+4, r19	; 0x04
    2d82:	2b 83       	std	Y+3, r18	; 0x03
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	d1 f0       	breq	.+52     	; 0x2dc2 <GPIO_writePort+0x5e>
    2d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d90:	3c 81       	ldd	r19, Y+4	; 0x04
    2d92:	22 30       	cpi	r18, 0x02	; 2
    2d94:	31 05       	cpc	r19, r1
    2d96:	2c f4       	brge	.+10     	; 0x2da2 <GPIO_writePort+0x3e>
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	61 f0       	breq	.+24     	; 0x2db8 <GPIO_writePort+0x54>
    2da0:	1e c0       	rjmp	.+60     	; 0x2dde <GPIO_writePort+0x7a>
    2da2:	2b 81       	ldd	r18, Y+3	; 0x03
    2da4:	3c 81       	ldd	r19, Y+4	; 0x04
    2da6:	22 30       	cpi	r18, 0x02	; 2
    2da8:	31 05       	cpc	r19, r1
    2daa:	81 f0       	breq	.+32     	; 0x2dcc <GPIO_writePort+0x68>
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	83 30       	cpi	r24, 0x03	; 3
    2db2:	91 05       	cpc	r25, r1
    2db4:	81 f0       	breq	.+32     	; 0x2dd6 <GPIO_writePort+0x72>
    2db6:	13 c0       	rjmp	.+38     	; 0x2dde <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2db8:	eb e3       	ldi	r30, 0x3B	; 59
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbe:	80 83       	st	Z, r24
    2dc0:	0e c0       	rjmp	.+28     	; 0x2dde <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2dc2:	e8 e3       	ldi	r30, 0x38	; 56
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	80 83       	st	Z, r24
    2dca:	09 c0       	rjmp	.+18     	; 0x2dde <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2dcc:	e5 e3       	ldi	r30, 0x35	; 53
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	80 83       	st	Z, r24
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2dd6:	e2 e3       	ldi	r30, 0x32	; 50
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	80 83       	st	Z, r24
			break;
		}
	}
}
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <GPIO_readPort+0x6>
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <GPIO_readPort+0x8>
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2dfa:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	84 30       	cpi	r24, 0x04	; 4
    2e00:	90 f5       	brcc	.+100    	; 0x2e66 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	3c 83       	std	Y+4, r19	; 0x04
    2e0a:	2b 83       	std	Y+3, r18	; 0x03
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	91 05       	cpc	r25, r1
    2e14:	d1 f0       	breq	.+52     	; 0x2e4a <GPIO_readPort+0x5e>
    2e16:	2b 81       	ldd	r18, Y+3	; 0x03
    2e18:	3c 81       	ldd	r19, Y+4	; 0x04
    2e1a:	22 30       	cpi	r18, 0x02	; 2
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <GPIO_readPort+0x3e>
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	61 f0       	breq	.+24     	; 0x2e40 <GPIO_readPort+0x54>
    2e28:	1e c0       	rjmp	.+60     	; 0x2e66 <GPIO_readPort+0x7a>
    2e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e2e:	22 30       	cpi	r18, 0x02	; 2
    2e30:	31 05       	cpc	r19, r1
    2e32:	81 f0       	breq	.+32     	; 0x2e54 <GPIO_readPort+0x68>
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	83 30       	cpi	r24, 0x03	; 3
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	81 f0       	breq	.+32     	; 0x2e5e <GPIO_readPort+0x72>
    2e3e:	13 c0       	rjmp	.+38     	; 0x2e66 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2e40:	e9 e3       	ldi	r30, 0x39	; 57
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	0e c0       	rjmp	.+28     	; 0x2e66 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2e4a:	e6 e3       	ldi	r30, 0x36	; 54
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	09 c0       	rjmp	.+18     	; 0x2e66 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2e54:	e3 e3       	ldi	r30, 0x33	; 51
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	04 c0       	rjmp	.+8      	; 0x2e66 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2e5e:	e0 e3       	ldi	r30, 0x30	; 48
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <Buzzer_init>:
/*
 * Description:
 * Initializes the buzzer pin direction as an output pin and turns off the buzzer.
 */
void Buzzer_init(void)
{
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    /* Set the buzzer pin as an output pin */
    GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	65 e0       	ldi	r22, 0x05	; 5
    2e82:	41 e0       	ldi	r20, 0x01	; 1
    2e84:	0e 94 fd 13 	call	0x27fa	; 0x27fa <GPIO_setupPinDirection>

    /* Turn off the buzzer initially (set pin low) */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	65 e0       	ldi	r22, 0x05	; 5
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
}
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <Buzzer_on>:
/*
 * Description:
 * Activates the buzzer (turns the buzzer ON).
 */
void Buzzer_on(void)
{
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    /* Set the buzzer pin high to turn it ON */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    2ea0:	82 e0       	ldi	r24, 0x02	; 2
    2ea2:	65 e0       	ldi	r22, 0x05	; 5
    2ea4:	41 e0       	ldi	r20, 0x01	; 1
    2ea6:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
}
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <Buzzer_off>:
/*
 * Description:
 * Deactivates the buzzer (turns the buzzer OFF).
 */
void Buzzer_off(void)
{
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    /* Set the buzzer pin low to turn it OFF */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2eb8:	82 e0       	ldi	r24, 0x02	; 2
    2eba:	65 e0       	ldi	r22, 0x05	; 5
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <GPIO_writePin>
}
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <main>:
#include <util/delay.h>
#include <avr/io.h> /* To use the SREG register */

volatile unsigned char buzzerTriggered = 0; // Flag to check if the buzzer triggered

int main(void) {
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	6e 97       	sbiw	r28, 0x1e	; 30
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    2edc:	af e5       	ldi	r26, 0x5F	; 95
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	ef e5       	ldi	r30, 0x5F	; 95
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	80 68       	ori	r24, 0x80	; 128
    2ee8:	8c 93       	st	X, r24

    /* Initialize all the peripherals */
    LCD_init();             // Initialize the LCD display
    2eea:	0e 94 c1 08 	call	0x1182	; 0x1182 <LCD_init>
    Ultrasonic_init();      // Initialize the ultrasonic sensor
    2eee:	0e 94 17 07 	call	0xe2e	; 0xe2e <Ultrasonic_init>
    LEDS_init();            // Initialize the LEDs (Red, Green, Blue)
    2ef2:	0e 94 84 08 	call	0x1108	; 0x1108 <LEDS_init>
    Buzzer_init();          // Initialize the buzzer
    2ef6:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <Buzzer_init>
    uint16 distance;        // Variable to store the distance measured by the ultrasonic sensor

    /* Main loop */
    while (1) {
        /* Read distance from the ultrasonic sensor */
        distance = Ultrasonic_readDistance();
    2efa:	0e 94 12 08 	call	0x1024	; 0x1024 <Ultrasonic_readDistance>
    2efe:	9e 8f       	std	Y+30, r25	; 0x1e
    2f00:	8d 8f       	std	Y+29, r24	; 0x1d

        /* Display the distance on the LCD */
        LCD_displayStringRowColumn(0, 0, "Distance= ");  // Display "Distance ="
    2f02:	20 e6       	ldi	r18, 0x60	; 96
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	a9 01       	movw	r20, r18
    2f0c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_displayStringRowColumn>
        if(distance >= 100){
    2f10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f14:	84 36       	cpi	r24, 0x64	; 100
    2f16:	91 05       	cpc	r25, r1
    2f18:	48 f0       	brcs	.+18     	; 0x2f2c <main+0x64>
        	LCD_intgerToString(distance);                // Display the measured distance
    2f1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f1e:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_intgerToString>
        	LCD_displayString("cm");                 	 // Display the unit "cm"
    2f22:	8b e6       	ldi	r24, 0x6B	; 107
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 69 12 	call	0x24d2	; 0x24d2 <LCD_displayString>
    2f2a:	16 c0       	rjmp	.+44     	; 0x2f58 <main+0x90>
        }
        else if (distance >= 10){
    2f2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f30:	8a 30       	cpi	r24, 0x0A	; 10
    2f32:	91 05       	cpc	r25, r1
    2f34:	48 f0       	brcs	.+18     	; 0x2f48 <main+0x80>
        	LCD_intgerToString(distance);             	 // Display the measured distance
    2f36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f3a:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_intgerToString>
        	LCD_displayString(" cm");               	 // Display the unit "cm"
    2f3e:	8e e6       	ldi	r24, 0x6E	; 110
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 69 12 	call	0x24d2	; 0x24d2 <LCD_displayString>
    2f46:	08 c0       	rjmp	.+16     	; 0x2f58 <main+0x90>
        }
        else{
        	LCD_intgerToString(distance);            	 // Display the measured distance
    2f48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f4c:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_intgerToString>
        	LCD_displayString("  cm");              	 // Display the unit "cm"
    2f50:	82 e7       	ldi	r24, 0x72	; 114
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 69 12 	call	0x24d2	; 0x24d2 <LCD_displayString>
        }

        /* Handle distance-to-LED and buzzer mapping */
        if (distance <= 5) {
    2f58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f5c:	86 30       	cpi	r24, 0x06	; 6
    2f5e:	91 05       	cpc	r25, r1
    2f60:	08 f0       	brcs	.+2      	; 0x2f64 <main+0x9c>
    2f62:	03 c1       	rjmp	.+518    	; 0x316a <main+0x2a2>
            /* Distance <= 5 cm: All LEDs flashing, Buzzer ON, LCD displays "Stop" */
            LCD_displayStringRowColumn(1, 6, "STOP!");
    2f64:	27 e7       	ldi	r18, 0x77	; 119
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	66 e0       	ldi	r22, 0x06	; 6
    2f6c:	a9 01       	movw	r20, r18
    2f6e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_displayStringRowColumn>
            LED_on(RED);
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            LED_on(GREEN);
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            LED_on(BLUE);
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            Buzzer_on();     // Buzzer ON
    2f84:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <Buzzer_on>
            buzzerTriggered = 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	80 93 93 01 	sts	0x0193, r24
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	aa ef       	ldi	r26, 0xFA	; 250
    2f94:	b3 e4       	ldi	r27, 0x43	; 67
    2f96:	89 8f       	std	Y+25, r24	; 0x19
    2f98:	9a 8f       	std	Y+26, r25	; 0x1a
    2f9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	4a e7       	ldi	r20, 0x7A	; 122
    2fac:	55 e4       	ldi	r21, 0x45	; 69
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	8d 8b       	std	Y+21, r24	; 0x15
    2fb8:	9e 8b       	std	Y+22, r25	; 0x16
    2fba:	af 8b       	std	Y+23, r26	; 0x17
    2fbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e8       	ldi	r20, 0x80	; 128
    2fcc:	5f e3       	ldi	r21, 0x3F	; 63
    2fce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fd2:	88 23       	and	r24, r24
    2fd4:	2c f4       	brge	.+10     	; 0x2fe0 <main+0x118>
		__ticks = 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9c 8b       	std	Y+20, r25	; 0x14
    2fdc:	8b 8b       	std	Y+19, r24	; 0x13
    2fde:	3f c0       	rjmp	.+126    	; 0x305e <main+0x196>
	else if (__tmp > 65535)
    2fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	3f ef       	ldi	r19, 0xFF	; 255
    2fec:	4f e7       	ldi	r20, 0x7F	; 127
    2fee:	57 e4       	ldi	r21, 0x47	; 71
    2ff0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff4:	18 16       	cp	r1, r24
    2ff6:	4c f5       	brge	.+82     	; 0x304a <main+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e2       	ldi	r20, 0x20	; 32
    3006:	51 e4       	ldi	r21, 0x41	; 65
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9c 8b       	std	Y+20, r25	; 0x14
    301e:	8b 8b       	std	Y+19, r24	; 0x13
    3020:	0f c0       	rjmp	.+30     	; 0x3040 <main+0x178>
    3022:	80 e9       	ldi	r24, 0x90	; 144
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	9a 8b       	std	Y+18, r25	; 0x12
    3028:	89 8b       	std	Y+17, r24	; 0x11
    302a:	89 89       	ldd	r24, Y+17	; 0x11
    302c:	9a 89       	ldd	r25, Y+18	; 0x12
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <main+0x166>
    3032:	9a 8b       	std	Y+18, r25	; 0x12
    3034:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3036:	8b 89       	ldd	r24, Y+19	; 0x13
    3038:	9c 89       	ldd	r25, Y+20	; 0x14
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	9c 8b       	std	Y+20, r25	; 0x14
    303e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3040:	8b 89       	ldd	r24, Y+19	; 0x13
    3042:	9c 89       	ldd	r25, Y+20	; 0x14
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	69 f7       	brne	.-38     	; 0x3022 <main+0x15a>
    3048:	14 c0       	rjmp	.+40     	; 0x3072 <main+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304a:	6d 89       	ldd	r22, Y+21	; 0x15
    304c:	7e 89       	ldd	r23, Y+22	; 0x16
    304e:	8f 89       	ldd	r24, Y+23	; 0x17
    3050:	98 8d       	ldd	r25, Y+24	; 0x18
    3052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	9c 8b       	std	Y+20, r25	; 0x14
    305c:	8b 8b       	std	Y+19, r24	; 0x13
    305e:	8b 89       	ldd	r24, Y+19	; 0x13
    3060:	9c 89       	ldd	r25, Y+20	; 0x14
    3062:	98 8b       	std	Y+16, r25	; 0x10
    3064:	8f 87       	std	Y+15, r24	; 0x0f
    3066:	8f 85       	ldd	r24, Y+15	; 0x0f
    3068:	98 89       	ldd	r25, Y+16	; 0x10
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <main+0x1a2>
    306e:	98 8b       	std	Y+16, r25	; 0x10
    3070:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(500);
            LED_off(RED);
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
            LED_off(GREEN);
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
            LED_off(BLUE);
    307e:	82 e0       	ldi	r24, 0x02	; 2
    3080:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	aa ef       	ldi	r26, 0xFA	; 250
    308a:	b3 e4       	ldi	r27, 0x43	; 67
    308c:	8b 87       	std	Y+11, r24	; 0x0b
    308e:	9c 87       	std	Y+12, r25	; 0x0c
    3090:	ad 87       	std	Y+13, r26	; 0x0d
    3092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3094:	6b 85       	ldd	r22, Y+11	; 0x0b
    3096:	7c 85       	ldd	r23, Y+12	; 0x0c
    3098:	8d 85       	ldd	r24, Y+13	; 0x0d
    309a:	9e 85       	ldd	r25, Y+14	; 0x0e
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4a e7       	ldi	r20, 0x7A	; 122
    30a2:	55 e4       	ldi	r21, 0x45	; 69
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	8f 83       	std	Y+7, r24	; 0x07
    30ae:	98 87       	std	Y+8, r25	; 0x08
    30b0:	a9 87       	std	Y+9, r26	; 0x09
    30b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b4:	6f 81       	ldd	r22, Y+7	; 0x07
    30b6:	78 85       	ldd	r23, Y+8	; 0x08
    30b8:	89 85       	ldd	r24, Y+9	; 0x09
    30ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e8       	ldi	r20, 0x80	; 128
    30c2:	5f e3       	ldi	r21, 0x3F	; 63
    30c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c8:	88 23       	and	r24, r24
    30ca:	2c f4       	brge	.+10     	; 0x30d6 <main+0x20e>
		__ticks = 1;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05
    30d4:	3f c0       	rjmp	.+126    	; 0x3154 <main+0x28c>
	else if (__tmp > 65535)
    30d6:	6f 81       	ldd	r22, Y+7	; 0x07
    30d8:	78 85       	ldd	r23, Y+8	; 0x08
    30da:	89 85       	ldd	r24, Y+9	; 0x09
    30dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	3f ef       	ldi	r19, 0xFF	; 255
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	57 e4       	ldi	r21, 0x47	; 71
    30e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	4c f5       	brge	.+82     	; 0x3140 <main+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	0f c0       	rjmp	.+30     	; 0x3136 <main+0x26e>
    3118:	80 e9       	ldi	r24, 0x90	; 144
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	9c 83       	std	Y+4, r25	; 0x04
    311e:	8b 83       	std	Y+3, r24	; 0x03
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <main+0x25c>
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	9e 81       	ldd	r25, Y+6	; 0x06
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	9e 83       	std	Y+6, r25	; 0x06
    3134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3136:	8d 81       	ldd	r24, Y+5	; 0x05
    3138:	9e 81       	ldd	r25, Y+6	; 0x06
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	69 f7       	brne	.-38     	; 0x3118 <main+0x250>
    313e:	dd ce       	rjmp	.-582    	; 0x2efa <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	6f 81       	ldd	r22, Y+7	; 0x07
    3142:	78 85       	ldd	r23, Y+8	; 0x08
    3144:	89 85       	ldd	r24, Y+9	; 0x09
    3146:	9a 85       	ldd	r25, Y+10	; 0x0a
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9e 83       	std	Y+6, r25	; 0x06
    3152:	8d 83       	std	Y+5, r24	; 0x05
    3154:	8d 81       	ldd	r24, Y+5	; 0x05
    3156:	9e 81       	ldd	r25, Y+6	; 0x06
    3158:	9a 83       	std	Y+2, r25	; 0x02
    315a:	89 83       	std	Y+1, r24	; 0x01
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <main+0x298>
    3164:	9a 83       	std	Y+2, r25	; 0x02
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	c8 ce       	rjmp	.-624    	; 0x2efa <main+0x32>
            _delay_ms(500);  // Flashing delay
        }
        else if (distance <= 10) {
    316a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    316c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    316e:	8b 30       	cpi	r24, 0x0B	; 11
    3170:	91 05       	cpc	r25, r1
    3172:	d0 f4       	brcc	.+52     	; 0x31a8 <main+0x2e0>
            /* 6 cm <= Distance <= 10 cm: All LEDs ON, Buzzer OFF */
        	LCD_displayStringRowColumn(1, 6, "     ");
    3174:	2d e7       	ldi	r18, 0x7D	; 125
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	66 e0       	ldi	r22, 0x06	; 6
    317c:	a9 01       	movw	r20, r18
    317e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_displayStringRowColumn>
            LED_on(RED);
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            LED_on(GREEN);
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            LED_on(BLUE);
    318e:	82 e0       	ldi	r24, 0x02	; 2
    3190:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            if(buzzerTriggered == 1){
    3194:	80 91 93 01 	lds	r24, 0x0193
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	09 f0       	breq	.+2      	; 0x319e <main+0x2d6>
    319c:	ae ce       	rjmp	.-676    	; 0x2efa <main+0x32>
            	Buzzer_off();  // Buzzer OFF
    319e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <Buzzer_off>
            	buzzerTriggered = 0;
    31a2:	10 92 93 01 	sts	0x0193, r1
    31a6:	a9 ce       	rjmp	.-686    	; 0x2efa <main+0x32>
            }
        }
        else if (distance <= 15) {
    31a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ac:	80 31       	cpi	r24, 0x10	; 16
    31ae:	91 05       	cpc	r25, r1
    31b0:	d0 f4       	brcc	.+52     	; 0x31e6 <main+0x31e>
            /* 11 cm <= Distance <= 15 cm: Red and Green LEDs ON, Blue LED OFF */
        	LCD_displayStringRowColumn(1, 6, "     ");
    31b2:	2d e7       	ldi	r18, 0x7D	; 125
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	66 e0       	ldi	r22, 0x06	; 6
    31ba:	a9 01       	movw	r20, r18
    31bc:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_displayStringRowColumn>
            LED_on(RED);
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            LED_on(GREEN);
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            LED_off(BLUE);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
            if(buzzerTriggered == 1){
    31d2:	80 91 93 01 	lds	r24, 0x0193
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	09 f0       	breq	.+2      	; 0x31dc <main+0x314>
    31da:	8f ce       	rjmp	.-738    	; 0x2efa <main+0x32>
            	Buzzer_off();  // Buzzer OFF
    31dc:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <Buzzer_off>
            	buzzerTriggered = 0;
    31e0:	10 92 93 01 	sts	0x0193, r1
    31e4:	8a ce       	rjmp	.-748    	; 0x2efa <main+0x32>
            }
        }
        else if (distance <= 20) {
    31e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ea:	85 31       	cpi	r24, 0x15	; 21
    31ec:	91 05       	cpc	r25, r1
    31ee:	d0 f4       	brcc	.+52     	; 0x3224 <main+0x35c>
            /* 16 cm <= Distance <= 20 cm: Only Red LED ON, others OFF */
        	LCD_displayStringRowColumn(1, 6, "     ");
    31f0:	2d e7       	ldi	r18, 0x7D	; 125
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	66 e0       	ldi	r22, 0x06	; 6
    31f8:	a9 01       	movw	r20, r18
    31fa:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_displayStringRowColumn>
            LED_on(RED);
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	0e 94 a3 08 	call	0x1146	; 0x1146 <LED_on>
            LED_off(GREEN);
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
            LED_off(BLUE);
    320a:	82 e0       	ldi	r24, 0x02	; 2
    320c:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
            if(buzzerTriggered == 1){
    3210:	80 91 93 01 	lds	r24, 0x0193
    3214:	81 30       	cpi	r24, 0x01	; 1
    3216:	09 f0       	breq	.+2      	; 0x321a <main+0x352>
    3218:	70 ce       	rjmp	.-800    	; 0x2efa <main+0x32>
            	Buzzer_off();  // Buzzer OFF
    321a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <Buzzer_off>
            	buzzerTriggered = 0;
    321e:	10 92 93 01 	sts	0x0193, r1
    3222:	6b ce       	rjmp	.-810    	; 0x2efa <main+0x32>
            }
        }
        else {
            /* Distance > 20 cm: All LEDs OFF, Buzzer OFF */
        	LCD_displayStringRowColumn(1, 6, "     ");
    3224:	2d e7       	ldi	r18, 0x7D	; 125
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	66 e0       	ldi	r22, 0x06	; 6
    322c:	a9 01       	movw	r20, r18
    322e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_displayStringRowColumn>
            LED_off(RED);
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
            LED_off(GREEN);
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
            LED_off(BLUE);
    323e:	82 e0       	ldi	r24, 0x02	; 2
    3240:	0e 94 b2 08 	call	0x1164	; 0x1164 <LED_off>
            if(buzzerTriggered == 1){
    3244:	80 91 93 01 	lds	r24, 0x0193
    3248:	81 30       	cpi	r24, 0x01	; 1
    324a:	09 f0       	breq	.+2      	; 0x324e <main+0x386>
    324c:	56 ce       	rjmp	.-852    	; 0x2efa <main+0x32>
            	Buzzer_off();  // Buzzer OFF
    324e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <Buzzer_off>
            	buzzerTriggered = 0;
    3252:	10 92 93 01 	sts	0x0193, r1
    3256:	51 ce       	rjmp	.-862    	; 0x2efa <main+0x32>

00003258 <__prologue_saves__>:
    3258:	2f 92       	push	r2
    325a:	3f 92       	push	r3
    325c:	4f 92       	push	r4
    325e:	5f 92       	push	r5
    3260:	6f 92       	push	r6
    3262:	7f 92       	push	r7
    3264:	8f 92       	push	r8
    3266:	9f 92       	push	r9
    3268:	af 92       	push	r10
    326a:	bf 92       	push	r11
    326c:	cf 92       	push	r12
    326e:	df 92       	push	r13
    3270:	ef 92       	push	r14
    3272:	ff 92       	push	r15
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
    3278:	cf 93       	push	r28
    327a:	df 93       	push	r29
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	ca 1b       	sub	r28, r26
    3282:	db 0b       	sbc	r29, r27
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	f8 94       	cli
    3288:	de bf       	out	0x3e, r29	; 62
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	cd bf       	out	0x3d, r28	; 61
    328e:	09 94       	ijmp

00003290 <__epilogue_restores__>:
    3290:	2a 88       	ldd	r2, Y+18	; 0x12
    3292:	39 88       	ldd	r3, Y+17	; 0x11
    3294:	48 88       	ldd	r4, Y+16	; 0x10
    3296:	5f 84       	ldd	r5, Y+15	; 0x0f
    3298:	6e 84       	ldd	r6, Y+14	; 0x0e
    329a:	7d 84       	ldd	r7, Y+13	; 0x0d
    329c:	8c 84       	ldd	r8, Y+12	; 0x0c
    329e:	9b 84       	ldd	r9, Y+11	; 0x0b
    32a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    32a2:	b9 84       	ldd	r11, Y+9	; 0x09
    32a4:	c8 84       	ldd	r12, Y+8	; 0x08
    32a6:	df 80       	ldd	r13, Y+7	; 0x07
    32a8:	ee 80       	ldd	r14, Y+6	; 0x06
    32aa:	fd 80       	ldd	r15, Y+5	; 0x05
    32ac:	0c 81       	ldd	r16, Y+4	; 0x04
    32ae:	1b 81       	ldd	r17, Y+3	; 0x03
    32b0:	aa 81       	ldd	r26, Y+2	; 0x02
    32b2:	b9 81       	ldd	r27, Y+1	; 0x01
    32b4:	ce 0f       	add	r28, r30
    32b6:	d1 1d       	adc	r29, r1
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	de bf       	out	0x3e, r29	; 62
    32be:	0f be       	out	0x3f, r0	; 63
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	ed 01       	movw	r28, r26
    32c4:	08 95       	ret

000032c6 <itoa>:
    32c6:	fb 01       	movw	r30, r22
    32c8:	9f 01       	movw	r18, r30
    32ca:	e8 94       	clt
    32cc:	42 30       	cpi	r20, 0x02	; 2
    32ce:	c4 f0       	brlt	.+48     	; 0x3300 <itoa+0x3a>
    32d0:	45 32       	cpi	r20, 0x25	; 37
    32d2:	b4 f4       	brge	.+44     	; 0x3300 <itoa+0x3a>
    32d4:	4a 30       	cpi	r20, 0x0A	; 10
    32d6:	29 f4       	brne	.+10     	; 0x32e2 <itoa+0x1c>
    32d8:	97 fb       	bst	r25, 7
    32da:	1e f4       	brtc	.+6      	; 0x32e2 <itoa+0x1c>
    32dc:	90 95       	com	r25
    32de:	81 95       	neg	r24
    32e0:	9f 4f       	sbci	r25, 0xFF	; 255
    32e2:	64 2f       	mov	r22, r20
    32e4:	77 27       	eor	r23, r23
    32e6:	0e 94 10 1a 	call	0x3420	; 0x3420 <__udivmodhi4>
    32ea:	80 5d       	subi	r24, 0xD0	; 208
    32ec:	8a 33       	cpi	r24, 0x3A	; 58
    32ee:	0c f0       	brlt	.+2      	; 0x32f2 <itoa+0x2c>
    32f0:	89 5d       	subi	r24, 0xD9	; 217
    32f2:	81 93       	st	Z+, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	00 97       	sbiw	r24, 0x00	; 0
    32f8:	a1 f7       	brne	.-24     	; 0x32e2 <itoa+0x1c>
    32fa:	16 f4       	brtc	.+4      	; 0x3300 <itoa+0x3a>
    32fc:	5d e2       	ldi	r21, 0x2D	; 45
    32fe:	51 93       	st	Z+, r21
    3300:	10 82       	st	Z, r1
    3302:	c9 01       	movw	r24, r18
    3304:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <strrev>

00003308 <ceil>:
    3308:	3b d0       	rcall	.+118    	; 0x3380 <__fp_trunc>
    330a:	80 f0       	brcs	.+32     	; 0x332c <ceil+0x24>
    330c:	9f 37       	cpi	r25, 0x7F	; 127
    330e:	40 f4       	brcc	.+16     	; 0x3320 <ceil+0x18>
    3310:	91 11       	cpse	r25, r1
    3312:	0e f4       	brtc	.+2      	; 0x3316 <ceil+0xe>
    3314:	4d c0       	rjmp	.+154    	; 0x33b0 <__fp_szero>
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	70 e0       	ldi	r23, 0x00	; 0
    331a:	80 e8       	ldi	r24, 0x80	; 128
    331c:	9f e3       	ldi	r25, 0x3F	; 63
    331e:	08 95       	ret
    3320:	26 f0       	brts	.+8      	; 0x332a <ceil+0x22>
    3322:	1b 16       	cp	r1, r27
    3324:	61 1d       	adc	r22, r1
    3326:	71 1d       	adc	r23, r1
    3328:	81 1d       	adc	r24, r1
    332a:	01 c0       	rjmp	.+2      	; 0x332e <__fp_mintl>
    332c:	1b c0       	rjmp	.+54     	; 0x3364 <__fp_mpack>

0000332e <__fp_mintl>:
    332e:	88 23       	and	r24, r24
    3330:	71 f4       	brne	.+28     	; 0x334e <__fp_mintl+0x20>
    3332:	77 23       	and	r23, r23
    3334:	21 f0       	breq	.+8      	; 0x333e <__fp_mintl+0x10>
    3336:	98 50       	subi	r25, 0x08	; 8
    3338:	87 2b       	or	r24, r23
    333a:	76 2f       	mov	r23, r22
    333c:	07 c0       	rjmp	.+14     	; 0x334c <__fp_mintl+0x1e>
    333e:	66 23       	and	r22, r22
    3340:	11 f4       	brne	.+4      	; 0x3346 <__fp_mintl+0x18>
    3342:	99 27       	eor	r25, r25
    3344:	0d c0       	rjmp	.+26     	; 0x3360 <__fp_mintl+0x32>
    3346:	90 51       	subi	r25, 0x10	; 16
    3348:	86 2b       	or	r24, r22
    334a:	70 e0       	ldi	r23, 0x00	; 0
    334c:	60 e0       	ldi	r22, 0x00	; 0
    334e:	2a f0       	brmi	.+10     	; 0x335a <__fp_mintl+0x2c>
    3350:	9a 95       	dec	r25
    3352:	66 0f       	add	r22, r22
    3354:	77 1f       	adc	r23, r23
    3356:	88 1f       	adc	r24, r24
    3358:	da f7       	brpl	.-10     	; 0x3350 <__fp_mintl+0x22>
    335a:	88 0f       	add	r24, r24
    335c:	96 95       	lsr	r25
    335e:	87 95       	ror	r24
    3360:	97 f9       	bld	r25, 7
    3362:	08 95       	ret

00003364 <__fp_mpack>:
    3364:	9f 3f       	cpi	r25, 0xFF	; 255
    3366:	31 f0       	breq	.+12     	; 0x3374 <__fp_mpack_finite+0xc>

00003368 <__fp_mpack_finite>:
    3368:	91 50       	subi	r25, 0x01	; 1
    336a:	20 f4       	brcc	.+8      	; 0x3374 <__fp_mpack_finite+0xc>
    336c:	87 95       	ror	r24
    336e:	77 95       	ror	r23
    3370:	67 95       	ror	r22
    3372:	b7 95       	ror	r27
    3374:	88 0f       	add	r24, r24
    3376:	91 1d       	adc	r25, r1
    3378:	96 95       	lsr	r25
    337a:	87 95       	ror	r24
    337c:	97 f9       	bld	r25, 7
    337e:	08 95       	ret

00003380 <__fp_trunc>:
    3380:	35 d0       	rcall	.+106    	; 0x33ec <__fp_splitA>
    3382:	a0 f0       	brcs	.+40     	; 0x33ac <__fp_trunc+0x2c>
    3384:	be e7       	ldi	r27, 0x7E	; 126
    3386:	b9 17       	cp	r27, r25
    3388:	88 f4       	brcc	.+34     	; 0x33ac <__fp_trunc+0x2c>
    338a:	bb 27       	eor	r27, r27
    338c:	9f 38       	cpi	r25, 0x8F	; 143
    338e:	60 f4       	brcc	.+24     	; 0x33a8 <__fp_trunc+0x28>
    3390:	16 16       	cp	r1, r22
    3392:	b1 1d       	adc	r27, r1
    3394:	67 2f       	mov	r22, r23
    3396:	78 2f       	mov	r23, r24
    3398:	88 27       	eor	r24, r24
    339a:	98 5f       	subi	r25, 0xF8	; 248
    339c:	f7 cf       	rjmp	.-18     	; 0x338c <__fp_trunc+0xc>
    339e:	86 95       	lsr	r24
    33a0:	77 95       	ror	r23
    33a2:	67 95       	ror	r22
    33a4:	b1 1d       	adc	r27, r1
    33a6:	93 95       	inc	r25
    33a8:	96 39       	cpi	r25, 0x96	; 150
    33aa:	c8 f3       	brcs	.-14     	; 0x339e <__fp_trunc+0x1e>
    33ac:	08 95       	ret

000033ae <__fp_zero>:
    33ae:	e8 94       	clt

000033b0 <__fp_szero>:
    33b0:	bb 27       	eor	r27, r27
    33b2:	66 27       	eor	r22, r22
    33b4:	77 27       	eor	r23, r23
    33b6:	cb 01       	movw	r24, r22
    33b8:	97 f9       	bld	r25, 7
    33ba:	08 95       	ret

000033bc <strrev>:
    33bc:	dc 01       	movw	r26, r24
    33be:	fc 01       	movw	r30, r24
    33c0:	67 2f       	mov	r22, r23
    33c2:	71 91       	ld	r23, Z+
    33c4:	77 23       	and	r23, r23
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <strrev+0x4>
    33c8:	32 97       	sbiw	r30, 0x02	; 2
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <strrev+0x18>
    33cc:	7c 91       	ld	r23, X
    33ce:	6d 93       	st	X+, r22
    33d0:	70 83       	st	Z, r23
    33d2:	62 91       	ld	r22, -Z
    33d4:	ae 17       	cp	r26, r30
    33d6:	bf 07       	cpc	r27, r31
    33d8:	c8 f3       	brcs	.-14     	; 0x33cc <strrev+0x10>
    33da:	08 95       	ret

000033dc <__fp_split3>:
    33dc:	57 fd       	sbrc	r21, 7
    33de:	90 58       	subi	r25, 0x80	; 128
    33e0:	44 0f       	add	r20, r20
    33e2:	55 1f       	adc	r21, r21
    33e4:	59 f0       	breq	.+22     	; 0x33fc <__fp_splitA+0x10>
    33e6:	5f 3f       	cpi	r21, 0xFF	; 255
    33e8:	71 f0       	breq	.+28     	; 0x3406 <__fp_splitA+0x1a>
    33ea:	47 95       	ror	r20

000033ec <__fp_splitA>:
    33ec:	88 0f       	add	r24, r24
    33ee:	97 fb       	bst	r25, 7
    33f0:	99 1f       	adc	r25, r25
    33f2:	61 f0       	breq	.+24     	; 0x340c <__fp_splitA+0x20>
    33f4:	9f 3f       	cpi	r25, 0xFF	; 255
    33f6:	79 f0       	breq	.+30     	; 0x3416 <__fp_splitA+0x2a>
    33f8:	87 95       	ror	r24
    33fa:	08 95       	ret
    33fc:	12 16       	cp	r1, r18
    33fe:	13 06       	cpc	r1, r19
    3400:	14 06       	cpc	r1, r20
    3402:	55 1f       	adc	r21, r21
    3404:	f2 cf       	rjmp	.-28     	; 0x33ea <__fp_split3+0xe>
    3406:	46 95       	lsr	r20
    3408:	f1 df       	rcall	.-30     	; 0x33ec <__fp_splitA>
    340a:	08 c0       	rjmp	.+16     	; 0x341c <__fp_splitA+0x30>
    340c:	16 16       	cp	r1, r22
    340e:	17 06       	cpc	r1, r23
    3410:	18 06       	cpc	r1, r24
    3412:	99 1f       	adc	r25, r25
    3414:	f1 cf       	rjmp	.-30     	; 0x33f8 <__fp_splitA+0xc>
    3416:	86 95       	lsr	r24
    3418:	71 05       	cpc	r23, r1
    341a:	61 05       	cpc	r22, r1
    341c:	08 94       	sec
    341e:	08 95       	ret

00003420 <__udivmodhi4>:
    3420:	aa 1b       	sub	r26, r26
    3422:	bb 1b       	sub	r27, r27
    3424:	51 e1       	ldi	r21, 0x11	; 17
    3426:	07 c0       	rjmp	.+14     	; 0x3436 <__udivmodhi4_ep>

00003428 <__udivmodhi4_loop>:
    3428:	aa 1f       	adc	r26, r26
    342a:	bb 1f       	adc	r27, r27
    342c:	a6 17       	cp	r26, r22
    342e:	b7 07       	cpc	r27, r23
    3430:	10 f0       	brcs	.+4      	; 0x3436 <__udivmodhi4_ep>
    3432:	a6 1b       	sub	r26, r22
    3434:	b7 0b       	sbc	r27, r23

00003436 <__udivmodhi4_ep>:
    3436:	88 1f       	adc	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	5a 95       	dec	r21
    343c:	a9 f7       	brne	.-22     	; 0x3428 <__udivmodhi4_loop>
    343e:	80 95       	com	r24
    3440:	90 95       	com	r25
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	08 95       	ret

00003448 <_exit>:
    3448:	f8 94       	cli

0000344a <__stop_program>:
    344a:	ff cf       	rjmp	.-2      	; 0x344a <__stop_program>
